
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model PontoTuristico
 * 
 */
export type PontoTuristico = $Result.DefaultSelection<Prisma.$PontoTuristicoPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model Visita
 * 
 */
export type Visita = $Result.DefaultSelection<Prisma.$VisitaPayload>
/**
 * Model Conquista
 * 
 */
export type Conquista = $Result.DefaultSelection<Prisma.$ConquistaPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pontoTuristico`: Exposes CRUD operations for the **PontoTuristico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PontoTuristicos
    * const pontoTuristicos = await prisma.pontoTuristico.findMany()
    * ```
    */
  get pontoTuristico(): Prisma.PontoTuristicoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.visita`: Exposes CRUD operations for the **Visita** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Visitas
    * const visitas = await prisma.visita.findMany()
    * ```
    */
  get visita(): Prisma.VisitaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.conquista`: Exposes CRUD operations for the **Conquista** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conquistas
    * const conquistas = await prisma.conquista.findMany()
    * ```
    */
  get conquista(): Prisma.ConquistaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    PontoTuristico: 'PontoTuristico',
    Feedback: 'Feedback',
    Visita: 'Visita',
    Conquista: 'Conquista'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "pontoTuristico" | "feedback" | "visita" | "conquista"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      PontoTuristico: {
        payload: Prisma.$PontoTuristicoPayload<ExtArgs>
        fields: Prisma.PontoTuristicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PontoTuristicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PontoTuristicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PontoTuristicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PontoTuristicoPayload>
          }
          findFirst: {
            args: Prisma.PontoTuristicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PontoTuristicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PontoTuristicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PontoTuristicoPayload>
          }
          findMany: {
            args: Prisma.PontoTuristicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PontoTuristicoPayload>[]
          }
          create: {
            args: Prisma.PontoTuristicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PontoTuristicoPayload>
          }
          createMany: {
            args: Prisma.PontoTuristicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PontoTuristicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PontoTuristicoPayload>[]
          }
          delete: {
            args: Prisma.PontoTuristicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PontoTuristicoPayload>
          }
          update: {
            args: Prisma.PontoTuristicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PontoTuristicoPayload>
          }
          deleteMany: {
            args: Prisma.PontoTuristicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PontoTuristicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PontoTuristicoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PontoTuristicoPayload>[]
          }
          upsert: {
            args: Prisma.PontoTuristicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PontoTuristicoPayload>
          }
          aggregate: {
            args: Prisma.PontoTuristicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePontoTuristico>
          }
          groupBy: {
            args: Prisma.PontoTuristicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PontoTuristicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PontoTuristicoCountArgs<ExtArgs>
            result: $Utils.Optional<PontoTuristicoCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      Visita: {
        payload: Prisma.$VisitaPayload<ExtArgs>
        fields: Prisma.VisitaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VisitaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VisitaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitaPayload>
          }
          findFirst: {
            args: Prisma.VisitaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VisitaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitaPayload>
          }
          findMany: {
            args: Prisma.VisitaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitaPayload>[]
          }
          create: {
            args: Prisma.VisitaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitaPayload>
          }
          createMany: {
            args: Prisma.VisitaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VisitaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitaPayload>[]
          }
          delete: {
            args: Prisma.VisitaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitaPayload>
          }
          update: {
            args: Prisma.VisitaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitaPayload>
          }
          deleteMany: {
            args: Prisma.VisitaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VisitaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VisitaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitaPayload>[]
          }
          upsert: {
            args: Prisma.VisitaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitaPayload>
          }
          aggregate: {
            args: Prisma.VisitaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVisita>
          }
          groupBy: {
            args: Prisma.VisitaGroupByArgs<ExtArgs>
            result: $Utils.Optional<VisitaGroupByOutputType>[]
          }
          count: {
            args: Prisma.VisitaCountArgs<ExtArgs>
            result: $Utils.Optional<VisitaCountAggregateOutputType> | number
          }
        }
      }
      Conquista: {
        payload: Prisma.$ConquistaPayload<ExtArgs>
        fields: Prisma.ConquistaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConquistaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConquistaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConquistaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConquistaPayload>
          }
          findFirst: {
            args: Prisma.ConquistaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConquistaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConquistaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConquistaPayload>
          }
          findMany: {
            args: Prisma.ConquistaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConquistaPayload>[]
          }
          create: {
            args: Prisma.ConquistaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConquistaPayload>
          }
          createMany: {
            args: Prisma.ConquistaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConquistaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConquistaPayload>[]
          }
          delete: {
            args: Prisma.ConquistaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConquistaPayload>
          }
          update: {
            args: Prisma.ConquistaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConquistaPayload>
          }
          deleteMany: {
            args: Prisma.ConquistaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConquistaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConquistaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConquistaPayload>[]
          }
          upsert: {
            args: Prisma.ConquistaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConquistaPayload>
          }
          aggregate: {
            args: Prisma.ConquistaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConquista>
          }
          groupBy: {
            args: Prisma.ConquistaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConquistaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConquistaCountArgs<ExtArgs>
            result: $Utils.Optional<ConquistaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    pontoTuristico?: PontoTuristicoOmit
    feedback?: FeedbackOmit
    visita?: VisitaOmit
    conquista?: ConquistaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    conquistas: number
    feedbacks: number
    visitas: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conquistas?: boolean | UsuarioCountOutputTypeCountConquistasArgs
    feedbacks?: boolean | UsuarioCountOutputTypeCountFeedbacksArgs
    visitas?: boolean | UsuarioCountOutputTypeCountVisitasArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountConquistasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConquistaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountVisitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VisitaWhereInput
  }


  /**
   * Count Type PontoTuristicoCountOutputType
   */

  export type PontoTuristicoCountOutputType = {
    feedbacks: number
    visitas: number
  }

  export type PontoTuristicoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbacks?: boolean | PontoTuristicoCountOutputTypeCountFeedbacksArgs
    visitas?: boolean | PontoTuristicoCountOutputTypeCountVisitasArgs
  }

  // Custom InputTypes
  /**
   * PontoTuristicoCountOutputType without action
   */
  export type PontoTuristicoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristicoCountOutputType
     */
    select?: PontoTuristicoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PontoTuristicoCountOutputType without action
   */
  export type PontoTuristicoCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * PontoTuristicoCountOutputType without action
   */
  export type PontoTuristicoCountOutputTypeCountVisitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VisitaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    foto: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    foto: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    foto: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    foto?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    foto?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    foto?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    email: string
    foto: string | null
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    foto?: boolean
    conquistas?: boolean | Usuario$conquistasArgs<ExtArgs>
    feedbacks?: boolean | Usuario$feedbacksArgs<ExtArgs>
    visitas?: boolean | Usuario$visitasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    foto?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    foto?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    foto?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "foto", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conquistas?: boolean | Usuario$conquistasArgs<ExtArgs>
    feedbacks?: boolean | Usuario$feedbacksArgs<ExtArgs>
    visitas?: boolean | Usuario$visitasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      conquistas: Prisma.$ConquistaPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      visitas: Prisma.$VisitaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      foto: string | null
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conquistas<T extends Usuario$conquistasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$conquistasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feedbacks<T extends Usuario$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    visitas<T extends Usuario$visitasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$visitasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly foto: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.conquistas
   */
  export type Usuario$conquistasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaInclude<ExtArgs> | null
    where?: ConquistaWhereInput
    orderBy?: ConquistaOrderByWithRelationInput | ConquistaOrderByWithRelationInput[]
    cursor?: ConquistaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConquistaScalarFieldEnum | ConquistaScalarFieldEnum[]
  }

  /**
   * Usuario.feedbacks
   */
  export type Usuario$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Usuario.visitas
   */
  export type Usuario$visitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
    where?: VisitaWhereInput
    orderBy?: VisitaOrderByWithRelationInput | VisitaOrderByWithRelationInput[]
    cursor?: VisitaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VisitaScalarFieldEnum | VisitaScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model PontoTuristico
   */

  export type AggregatePontoTuristico = {
    _count: PontoTuristicoCountAggregateOutputType | null
    _avg: PontoTuristicoAvgAggregateOutputType | null
    _sum: PontoTuristicoSumAggregateOutputType | null
    _min: PontoTuristicoMinAggregateOutputType | null
    _max: PontoTuristicoMaxAggregateOutputType | null
  }

  export type PontoTuristicoAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type PontoTuristicoSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type PontoTuristicoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    latitude: number | null
    longitude: number | null
    categoria: string | null
    acessibilidade: boolean | null
    fotos: string | null
  }

  export type PontoTuristicoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    latitude: number | null
    longitude: number | null
    categoria: string | null
    acessibilidade: boolean | null
    fotos: string | null
  }

  export type PontoTuristicoCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    latitude: number
    longitude: number
    categoria: number
    acessibilidade: number
    fotos: number
    _all: number
  }


  export type PontoTuristicoAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type PontoTuristicoSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type PontoTuristicoMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    latitude?: true
    longitude?: true
    categoria?: true
    acessibilidade?: true
    fotos?: true
  }

  export type PontoTuristicoMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    latitude?: true
    longitude?: true
    categoria?: true
    acessibilidade?: true
    fotos?: true
  }

  export type PontoTuristicoCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    latitude?: true
    longitude?: true
    categoria?: true
    acessibilidade?: true
    fotos?: true
    _all?: true
  }

  export type PontoTuristicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PontoTuristico to aggregate.
     */
    where?: PontoTuristicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PontoTuristicos to fetch.
     */
    orderBy?: PontoTuristicoOrderByWithRelationInput | PontoTuristicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PontoTuristicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PontoTuristicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PontoTuristicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PontoTuristicos
    **/
    _count?: true | PontoTuristicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PontoTuristicoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PontoTuristicoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PontoTuristicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PontoTuristicoMaxAggregateInputType
  }

  export type GetPontoTuristicoAggregateType<T extends PontoTuristicoAggregateArgs> = {
        [P in keyof T & keyof AggregatePontoTuristico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePontoTuristico[P]>
      : GetScalarType<T[P], AggregatePontoTuristico[P]>
  }




  export type PontoTuristicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PontoTuristicoWhereInput
    orderBy?: PontoTuristicoOrderByWithAggregationInput | PontoTuristicoOrderByWithAggregationInput[]
    by: PontoTuristicoScalarFieldEnum[] | PontoTuristicoScalarFieldEnum
    having?: PontoTuristicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PontoTuristicoCountAggregateInputType | true
    _avg?: PontoTuristicoAvgAggregateInputType
    _sum?: PontoTuristicoSumAggregateInputType
    _min?: PontoTuristicoMinAggregateInputType
    _max?: PontoTuristicoMaxAggregateInputType
  }

  export type PontoTuristicoGroupByOutputType = {
    id: number
    nome: string
    descricao: string
    latitude: number
    longitude: number
    categoria: string
    acessibilidade: boolean
    fotos: string
    _count: PontoTuristicoCountAggregateOutputType | null
    _avg: PontoTuristicoAvgAggregateOutputType | null
    _sum: PontoTuristicoSumAggregateOutputType | null
    _min: PontoTuristicoMinAggregateOutputType | null
    _max: PontoTuristicoMaxAggregateOutputType | null
  }

  type GetPontoTuristicoGroupByPayload<T extends PontoTuristicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PontoTuristicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PontoTuristicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PontoTuristicoGroupByOutputType[P]>
            : GetScalarType<T[P], PontoTuristicoGroupByOutputType[P]>
        }
      >
    >


  export type PontoTuristicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    latitude?: boolean
    longitude?: boolean
    categoria?: boolean
    acessibilidade?: boolean
    fotos?: boolean
    feedbacks?: boolean | PontoTuristico$feedbacksArgs<ExtArgs>
    visitas?: boolean | PontoTuristico$visitasArgs<ExtArgs>
    _count?: boolean | PontoTuristicoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pontoTuristico"]>

  export type PontoTuristicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    latitude?: boolean
    longitude?: boolean
    categoria?: boolean
    acessibilidade?: boolean
    fotos?: boolean
  }, ExtArgs["result"]["pontoTuristico"]>

  export type PontoTuristicoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    latitude?: boolean
    longitude?: boolean
    categoria?: boolean
    acessibilidade?: boolean
    fotos?: boolean
  }, ExtArgs["result"]["pontoTuristico"]>

  export type PontoTuristicoSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    latitude?: boolean
    longitude?: boolean
    categoria?: boolean
    acessibilidade?: boolean
    fotos?: boolean
  }

  export type PontoTuristicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "descricao" | "latitude" | "longitude" | "categoria" | "acessibilidade" | "fotos", ExtArgs["result"]["pontoTuristico"]>
  export type PontoTuristicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbacks?: boolean | PontoTuristico$feedbacksArgs<ExtArgs>
    visitas?: boolean | PontoTuristico$visitasArgs<ExtArgs>
    _count?: boolean | PontoTuristicoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PontoTuristicoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PontoTuristicoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PontoTuristicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PontoTuristico"
    objects: {
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      visitas: Prisma.$VisitaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      descricao: string
      latitude: number
      longitude: number
      categoria: string
      acessibilidade: boolean
      fotos: string
    }, ExtArgs["result"]["pontoTuristico"]>
    composites: {}
  }

  type PontoTuristicoGetPayload<S extends boolean | null | undefined | PontoTuristicoDefaultArgs> = $Result.GetResult<Prisma.$PontoTuristicoPayload, S>

  type PontoTuristicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PontoTuristicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PontoTuristicoCountAggregateInputType | true
    }

  export interface PontoTuristicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PontoTuristico'], meta: { name: 'PontoTuristico' } }
    /**
     * Find zero or one PontoTuristico that matches the filter.
     * @param {PontoTuristicoFindUniqueArgs} args - Arguments to find a PontoTuristico
     * @example
     * // Get one PontoTuristico
     * const pontoTuristico = await prisma.pontoTuristico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PontoTuristicoFindUniqueArgs>(args: SelectSubset<T, PontoTuristicoFindUniqueArgs<ExtArgs>>): Prisma__PontoTuristicoClient<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PontoTuristico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PontoTuristicoFindUniqueOrThrowArgs} args - Arguments to find a PontoTuristico
     * @example
     * // Get one PontoTuristico
     * const pontoTuristico = await prisma.pontoTuristico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PontoTuristicoFindUniqueOrThrowArgs>(args: SelectSubset<T, PontoTuristicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PontoTuristicoClient<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PontoTuristico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PontoTuristicoFindFirstArgs} args - Arguments to find a PontoTuristico
     * @example
     * // Get one PontoTuristico
     * const pontoTuristico = await prisma.pontoTuristico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PontoTuristicoFindFirstArgs>(args?: SelectSubset<T, PontoTuristicoFindFirstArgs<ExtArgs>>): Prisma__PontoTuristicoClient<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PontoTuristico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PontoTuristicoFindFirstOrThrowArgs} args - Arguments to find a PontoTuristico
     * @example
     * // Get one PontoTuristico
     * const pontoTuristico = await prisma.pontoTuristico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PontoTuristicoFindFirstOrThrowArgs>(args?: SelectSubset<T, PontoTuristicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PontoTuristicoClient<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PontoTuristicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PontoTuristicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PontoTuristicos
     * const pontoTuristicos = await prisma.pontoTuristico.findMany()
     * 
     * // Get first 10 PontoTuristicos
     * const pontoTuristicos = await prisma.pontoTuristico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pontoTuristicoWithIdOnly = await prisma.pontoTuristico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PontoTuristicoFindManyArgs>(args?: SelectSubset<T, PontoTuristicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PontoTuristico.
     * @param {PontoTuristicoCreateArgs} args - Arguments to create a PontoTuristico.
     * @example
     * // Create one PontoTuristico
     * const PontoTuristico = await prisma.pontoTuristico.create({
     *   data: {
     *     // ... data to create a PontoTuristico
     *   }
     * })
     * 
     */
    create<T extends PontoTuristicoCreateArgs>(args: SelectSubset<T, PontoTuristicoCreateArgs<ExtArgs>>): Prisma__PontoTuristicoClient<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PontoTuristicos.
     * @param {PontoTuristicoCreateManyArgs} args - Arguments to create many PontoTuristicos.
     * @example
     * // Create many PontoTuristicos
     * const pontoTuristico = await prisma.pontoTuristico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PontoTuristicoCreateManyArgs>(args?: SelectSubset<T, PontoTuristicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PontoTuristicos and returns the data saved in the database.
     * @param {PontoTuristicoCreateManyAndReturnArgs} args - Arguments to create many PontoTuristicos.
     * @example
     * // Create many PontoTuristicos
     * const pontoTuristico = await prisma.pontoTuristico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PontoTuristicos and only return the `id`
     * const pontoTuristicoWithIdOnly = await prisma.pontoTuristico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PontoTuristicoCreateManyAndReturnArgs>(args?: SelectSubset<T, PontoTuristicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PontoTuristico.
     * @param {PontoTuristicoDeleteArgs} args - Arguments to delete one PontoTuristico.
     * @example
     * // Delete one PontoTuristico
     * const PontoTuristico = await prisma.pontoTuristico.delete({
     *   where: {
     *     // ... filter to delete one PontoTuristico
     *   }
     * })
     * 
     */
    delete<T extends PontoTuristicoDeleteArgs>(args: SelectSubset<T, PontoTuristicoDeleteArgs<ExtArgs>>): Prisma__PontoTuristicoClient<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PontoTuristico.
     * @param {PontoTuristicoUpdateArgs} args - Arguments to update one PontoTuristico.
     * @example
     * // Update one PontoTuristico
     * const pontoTuristico = await prisma.pontoTuristico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PontoTuristicoUpdateArgs>(args: SelectSubset<T, PontoTuristicoUpdateArgs<ExtArgs>>): Prisma__PontoTuristicoClient<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PontoTuristicos.
     * @param {PontoTuristicoDeleteManyArgs} args - Arguments to filter PontoTuristicos to delete.
     * @example
     * // Delete a few PontoTuristicos
     * const { count } = await prisma.pontoTuristico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PontoTuristicoDeleteManyArgs>(args?: SelectSubset<T, PontoTuristicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PontoTuristicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PontoTuristicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PontoTuristicos
     * const pontoTuristico = await prisma.pontoTuristico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PontoTuristicoUpdateManyArgs>(args: SelectSubset<T, PontoTuristicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PontoTuristicos and returns the data updated in the database.
     * @param {PontoTuristicoUpdateManyAndReturnArgs} args - Arguments to update many PontoTuristicos.
     * @example
     * // Update many PontoTuristicos
     * const pontoTuristico = await prisma.pontoTuristico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PontoTuristicos and only return the `id`
     * const pontoTuristicoWithIdOnly = await prisma.pontoTuristico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PontoTuristicoUpdateManyAndReturnArgs>(args: SelectSubset<T, PontoTuristicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PontoTuristico.
     * @param {PontoTuristicoUpsertArgs} args - Arguments to update or create a PontoTuristico.
     * @example
     * // Update or create a PontoTuristico
     * const pontoTuristico = await prisma.pontoTuristico.upsert({
     *   create: {
     *     // ... data to create a PontoTuristico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PontoTuristico we want to update
     *   }
     * })
     */
    upsert<T extends PontoTuristicoUpsertArgs>(args: SelectSubset<T, PontoTuristicoUpsertArgs<ExtArgs>>): Prisma__PontoTuristicoClient<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PontoTuristicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PontoTuristicoCountArgs} args - Arguments to filter PontoTuristicos to count.
     * @example
     * // Count the number of PontoTuristicos
     * const count = await prisma.pontoTuristico.count({
     *   where: {
     *     // ... the filter for the PontoTuristicos we want to count
     *   }
     * })
    **/
    count<T extends PontoTuristicoCountArgs>(
      args?: Subset<T, PontoTuristicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PontoTuristicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PontoTuristico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PontoTuristicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PontoTuristicoAggregateArgs>(args: Subset<T, PontoTuristicoAggregateArgs>): Prisma.PrismaPromise<GetPontoTuristicoAggregateType<T>>

    /**
     * Group by PontoTuristico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PontoTuristicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PontoTuristicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PontoTuristicoGroupByArgs['orderBy'] }
        : { orderBy?: PontoTuristicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PontoTuristicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPontoTuristicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PontoTuristico model
   */
  readonly fields: PontoTuristicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PontoTuristico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PontoTuristicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feedbacks<T extends PontoTuristico$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, PontoTuristico$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    visitas<T extends PontoTuristico$visitasArgs<ExtArgs> = {}>(args?: Subset<T, PontoTuristico$visitasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PontoTuristico model
   */
  interface PontoTuristicoFieldRefs {
    readonly id: FieldRef<"PontoTuristico", 'Int'>
    readonly nome: FieldRef<"PontoTuristico", 'String'>
    readonly descricao: FieldRef<"PontoTuristico", 'String'>
    readonly latitude: FieldRef<"PontoTuristico", 'Float'>
    readonly longitude: FieldRef<"PontoTuristico", 'Float'>
    readonly categoria: FieldRef<"PontoTuristico", 'String'>
    readonly acessibilidade: FieldRef<"PontoTuristico", 'Boolean'>
    readonly fotos: FieldRef<"PontoTuristico", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PontoTuristico findUnique
   */
  export type PontoTuristicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PontoTuristicoInclude<ExtArgs> | null
    /**
     * Filter, which PontoTuristico to fetch.
     */
    where: PontoTuristicoWhereUniqueInput
  }

  /**
   * PontoTuristico findUniqueOrThrow
   */
  export type PontoTuristicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PontoTuristicoInclude<ExtArgs> | null
    /**
     * Filter, which PontoTuristico to fetch.
     */
    where: PontoTuristicoWhereUniqueInput
  }

  /**
   * PontoTuristico findFirst
   */
  export type PontoTuristicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PontoTuristicoInclude<ExtArgs> | null
    /**
     * Filter, which PontoTuristico to fetch.
     */
    where?: PontoTuristicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PontoTuristicos to fetch.
     */
    orderBy?: PontoTuristicoOrderByWithRelationInput | PontoTuristicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PontoTuristicos.
     */
    cursor?: PontoTuristicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PontoTuristicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PontoTuristicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PontoTuristicos.
     */
    distinct?: PontoTuristicoScalarFieldEnum | PontoTuristicoScalarFieldEnum[]
  }

  /**
   * PontoTuristico findFirstOrThrow
   */
  export type PontoTuristicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PontoTuristicoInclude<ExtArgs> | null
    /**
     * Filter, which PontoTuristico to fetch.
     */
    where?: PontoTuristicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PontoTuristicos to fetch.
     */
    orderBy?: PontoTuristicoOrderByWithRelationInput | PontoTuristicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PontoTuristicos.
     */
    cursor?: PontoTuristicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PontoTuristicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PontoTuristicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PontoTuristicos.
     */
    distinct?: PontoTuristicoScalarFieldEnum | PontoTuristicoScalarFieldEnum[]
  }

  /**
   * PontoTuristico findMany
   */
  export type PontoTuristicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PontoTuristicoInclude<ExtArgs> | null
    /**
     * Filter, which PontoTuristicos to fetch.
     */
    where?: PontoTuristicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PontoTuristicos to fetch.
     */
    orderBy?: PontoTuristicoOrderByWithRelationInput | PontoTuristicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PontoTuristicos.
     */
    cursor?: PontoTuristicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PontoTuristicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PontoTuristicos.
     */
    skip?: number
    distinct?: PontoTuristicoScalarFieldEnum | PontoTuristicoScalarFieldEnum[]
  }

  /**
   * PontoTuristico create
   */
  export type PontoTuristicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PontoTuristicoInclude<ExtArgs> | null
    /**
     * The data needed to create a PontoTuristico.
     */
    data: XOR<PontoTuristicoCreateInput, PontoTuristicoUncheckedCreateInput>
  }

  /**
   * PontoTuristico createMany
   */
  export type PontoTuristicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PontoTuristicos.
     */
    data: PontoTuristicoCreateManyInput | PontoTuristicoCreateManyInput[]
  }

  /**
   * PontoTuristico createManyAndReturn
   */
  export type PontoTuristicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * The data used to create many PontoTuristicos.
     */
    data: PontoTuristicoCreateManyInput | PontoTuristicoCreateManyInput[]
  }

  /**
   * PontoTuristico update
   */
  export type PontoTuristicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PontoTuristicoInclude<ExtArgs> | null
    /**
     * The data needed to update a PontoTuristico.
     */
    data: XOR<PontoTuristicoUpdateInput, PontoTuristicoUncheckedUpdateInput>
    /**
     * Choose, which PontoTuristico to update.
     */
    where: PontoTuristicoWhereUniqueInput
  }

  /**
   * PontoTuristico updateMany
   */
  export type PontoTuristicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PontoTuristicos.
     */
    data: XOR<PontoTuristicoUpdateManyMutationInput, PontoTuristicoUncheckedUpdateManyInput>
    /**
     * Filter which PontoTuristicos to update
     */
    where?: PontoTuristicoWhereInput
    /**
     * Limit how many PontoTuristicos to update.
     */
    limit?: number
  }

  /**
   * PontoTuristico updateManyAndReturn
   */
  export type PontoTuristicoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * The data used to update PontoTuristicos.
     */
    data: XOR<PontoTuristicoUpdateManyMutationInput, PontoTuristicoUncheckedUpdateManyInput>
    /**
     * Filter which PontoTuristicos to update
     */
    where?: PontoTuristicoWhereInput
    /**
     * Limit how many PontoTuristicos to update.
     */
    limit?: number
  }

  /**
   * PontoTuristico upsert
   */
  export type PontoTuristicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PontoTuristicoInclude<ExtArgs> | null
    /**
     * The filter to search for the PontoTuristico to update in case it exists.
     */
    where: PontoTuristicoWhereUniqueInput
    /**
     * In case the PontoTuristico found by the `where` argument doesn't exist, create a new PontoTuristico with this data.
     */
    create: XOR<PontoTuristicoCreateInput, PontoTuristicoUncheckedCreateInput>
    /**
     * In case the PontoTuristico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PontoTuristicoUpdateInput, PontoTuristicoUncheckedUpdateInput>
  }

  /**
   * PontoTuristico delete
   */
  export type PontoTuristicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PontoTuristicoInclude<ExtArgs> | null
    /**
     * Filter which PontoTuristico to delete.
     */
    where: PontoTuristicoWhereUniqueInput
  }

  /**
   * PontoTuristico deleteMany
   */
  export type PontoTuristicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PontoTuristicos to delete
     */
    where?: PontoTuristicoWhereInput
    /**
     * Limit how many PontoTuristicos to delete.
     */
    limit?: number
  }

  /**
   * PontoTuristico.feedbacks
   */
  export type PontoTuristico$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * PontoTuristico.visitas
   */
  export type PontoTuristico$visitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
    where?: VisitaWhereInput
    orderBy?: VisitaOrderByWithRelationInput | VisitaOrderByWithRelationInput[]
    cursor?: VisitaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VisitaScalarFieldEnum | VisitaScalarFieldEnum[]
  }

  /**
   * PontoTuristico without action
   */
  export type PontoTuristicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PontoTuristico
     */
    select?: PontoTuristicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PontoTuristico
     */
    omit?: PontoTuristicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PontoTuristicoInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    id: number | null
    estrelas: number | null
    usuarioId: number | null
    pontoId: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    id: number | null
    estrelas: number | null
    usuarioId: number | null
    pontoId: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: number | null
    texto: string | null
    estrelas: number | null
    tipo: string | null
    usuarioId: number | null
    pontoId: number | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: number | null
    texto: string | null
    estrelas: number | null
    tipo: string | null
    usuarioId: number | null
    pontoId: number | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    texto: number
    estrelas: number
    tipo: number
    usuarioId: number
    pontoId: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    id?: true
    estrelas?: true
    usuarioId?: true
    pontoId?: true
  }

  export type FeedbackSumAggregateInputType = {
    id?: true
    estrelas?: true
    usuarioId?: true
    pontoId?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    texto?: true
    estrelas?: true
    tipo?: true
    usuarioId?: true
    pontoId?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    texto?: true
    estrelas?: true
    tipo?: true
    usuarioId?: true
    pontoId?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    texto?: true
    estrelas?: true
    tipo?: true
    usuarioId?: true
    pontoId?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: number
    texto: string
    estrelas: number
    tipo: string
    usuarioId: number
    pontoId: number
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    texto?: boolean
    estrelas?: boolean
    tipo?: boolean
    usuarioId?: boolean
    pontoId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    texto?: boolean
    estrelas?: boolean
    tipo?: boolean
    usuarioId?: boolean
    pontoId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    texto?: boolean
    estrelas?: boolean
    tipo?: boolean
    usuarioId?: boolean
    pontoId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    texto?: boolean
    estrelas?: boolean
    tipo?: boolean
    usuarioId?: boolean
    pontoId?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "texto" | "estrelas" | "tipo" | "usuarioId" | "pontoId", ExtArgs["result"]["feedback"]>
  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      ponto: Prisma.$PontoTuristicoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      texto: string
      estrelas: number
      tipo: string
      usuarioId: number
      pontoId: number
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks and returns the data updated in the database.
     * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ponto<T extends PontoTuristicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PontoTuristicoDefaultArgs<ExtArgs>>): Prisma__PontoTuristicoClient<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'Int'>
    readonly texto: FieldRef<"Feedback", 'String'>
    readonly estrelas: FieldRef<"Feedback", 'Int'>
    readonly tipo: FieldRef<"Feedback", 'String'>
    readonly usuarioId: FieldRef<"Feedback", 'Int'>
    readonly pontoId: FieldRef<"Feedback", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback updateManyAndReturn
   */
  export type FeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model Visita
   */

  export type AggregateVisita = {
    _count: VisitaCountAggregateOutputType | null
    _avg: VisitaAvgAggregateOutputType | null
    _sum: VisitaSumAggregateOutputType | null
    _min: VisitaMinAggregateOutputType | null
    _max: VisitaMaxAggregateOutputType | null
  }

  export type VisitaAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    pontoId: number | null
  }

  export type VisitaSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    pontoId: number | null
  }

  export type VisitaMinAggregateOutputType = {
    id: number | null
    data: Date | null
    usuarioId: number | null
    pontoId: number | null
  }

  export type VisitaMaxAggregateOutputType = {
    id: number | null
    data: Date | null
    usuarioId: number | null
    pontoId: number | null
  }

  export type VisitaCountAggregateOutputType = {
    id: number
    data: number
    usuarioId: number
    pontoId: number
    _all: number
  }


  export type VisitaAvgAggregateInputType = {
    id?: true
    usuarioId?: true
    pontoId?: true
  }

  export type VisitaSumAggregateInputType = {
    id?: true
    usuarioId?: true
    pontoId?: true
  }

  export type VisitaMinAggregateInputType = {
    id?: true
    data?: true
    usuarioId?: true
    pontoId?: true
  }

  export type VisitaMaxAggregateInputType = {
    id?: true
    data?: true
    usuarioId?: true
    pontoId?: true
  }

  export type VisitaCountAggregateInputType = {
    id?: true
    data?: true
    usuarioId?: true
    pontoId?: true
    _all?: true
  }

  export type VisitaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Visita to aggregate.
     */
    where?: VisitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitas to fetch.
     */
    orderBy?: VisitaOrderByWithRelationInput | VisitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VisitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Visitas
    **/
    _count?: true | VisitaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VisitaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VisitaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisitaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisitaMaxAggregateInputType
  }

  export type GetVisitaAggregateType<T extends VisitaAggregateArgs> = {
        [P in keyof T & keyof AggregateVisita]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisita[P]>
      : GetScalarType<T[P], AggregateVisita[P]>
  }




  export type VisitaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VisitaWhereInput
    orderBy?: VisitaOrderByWithAggregationInput | VisitaOrderByWithAggregationInput[]
    by: VisitaScalarFieldEnum[] | VisitaScalarFieldEnum
    having?: VisitaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisitaCountAggregateInputType | true
    _avg?: VisitaAvgAggregateInputType
    _sum?: VisitaSumAggregateInputType
    _min?: VisitaMinAggregateInputType
    _max?: VisitaMaxAggregateInputType
  }

  export type VisitaGroupByOutputType = {
    id: number
    data: Date
    usuarioId: number
    pontoId: number
    _count: VisitaCountAggregateOutputType | null
    _avg: VisitaAvgAggregateOutputType | null
    _sum: VisitaSumAggregateOutputType | null
    _min: VisitaMinAggregateOutputType | null
    _max: VisitaMaxAggregateOutputType | null
  }

  type GetVisitaGroupByPayload<T extends VisitaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VisitaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisitaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisitaGroupByOutputType[P]>
            : GetScalarType<T[P], VisitaGroupByOutputType[P]>
        }
      >
    >


  export type VisitaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
    usuarioId?: boolean
    pontoId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["visita"]>

  export type VisitaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
    usuarioId?: boolean
    pontoId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["visita"]>

  export type VisitaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
    usuarioId?: boolean
    pontoId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["visita"]>

  export type VisitaSelectScalar = {
    id?: boolean
    data?: boolean
    usuarioId?: boolean
    pontoId?: boolean
  }

  export type VisitaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "data" | "usuarioId" | "pontoId", ExtArgs["result"]["visita"]>
  export type VisitaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }
  export type VisitaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }
  export type VisitaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    ponto?: boolean | PontoTuristicoDefaultArgs<ExtArgs>
  }

  export type $VisitaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Visita"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      ponto: Prisma.$PontoTuristicoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      data: Date
      usuarioId: number
      pontoId: number
    }, ExtArgs["result"]["visita"]>
    composites: {}
  }

  type VisitaGetPayload<S extends boolean | null | undefined | VisitaDefaultArgs> = $Result.GetResult<Prisma.$VisitaPayload, S>

  type VisitaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VisitaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VisitaCountAggregateInputType | true
    }

  export interface VisitaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Visita'], meta: { name: 'Visita' } }
    /**
     * Find zero or one Visita that matches the filter.
     * @param {VisitaFindUniqueArgs} args - Arguments to find a Visita
     * @example
     * // Get one Visita
     * const visita = await prisma.visita.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VisitaFindUniqueArgs>(args: SelectSubset<T, VisitaFindUniqueArgs<ExtArgs>>): Prisma__VisitaClient<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Visita that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VisitaFindUniqueOrThrowArgs} args - Arguments to find a Visita
     * @example
     * // Get one Visita
     * const visita = await prisma.visita.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VisitaFindUniqueOrThrowArgs>(args: SelectSubset<T, VisitaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VisitaClient<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Visita that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitaFindFirstArgs} args - Arguments to find a Visita
     * @example
     * // Get one Visita
     * const visita = await prisma.visita.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VisitaFindFirstArgs>(args?: SelectSubset<T, VisitaFindFirstArgs<ExtArgs>>): Prisma__VisitaClient<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Visita that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitaFindFirstOrThrowArgs} args - Arguments to find a Visita
     * @example
     * // Get one Visita
     * const visita = await prisma.visita.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VisitaFindFirstOrThrowArgs>(args?: SelectSubset<T, VisitaFindFirstOrThrowArgs<ExtArgs>>): Prisma__VisitaClient<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Visitas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Visitas
     * const visitas = await prisma.visita.findMany()
     * 
     * // Get first 10 Visitas
     * const visitas = await prisma.visita.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visitaWithIdOnly = await prisma.visita.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VisitaFindManyArgs>(args?: SelectSubset<T, VisitaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Visita.
     * @param {VisitaCreateArgs} args - Arguments to create a Visita.
     * @example
     * // Create one Visita
     * const Visita = await prisma.visita.create({
     *   data: {
     *     // ... data to create a Visita
     *   }
     * })
     * 
     */
    create<T extends VisitaCreateArgs>(args: SelectSubset<T, VisitaCreateArgs<ExtArgs>>): Prisma__VisitaClient<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Visitas.
     * @param {VisitaCreateManyArgs} args - Arguments to create many Visitas.
     * @example
     * // Create many Visitas
     * const visita = await prisma.visita.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VisitaCreateManyArgs>(args?: SelectSubset<T, VisitaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Visitas and returns the data saved in the database.
     * @param {VisitaCreateManyAndReturnArgs} args - Arguments to create many Visitas.
     * @example
     * // Create many Visitas
     * const visita = await prisma.visita.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Visitas and only return the `id`
     * const visitaWithIdOnly = await prisma.visita.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VisitaCreateManyAndReturnArgs>(args?: SelectSubset<T, VisitaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Visita.
     * @param {VisitaDeleteArgs} args - Arguments to delete one Visita.
     * @example
     * // Delete one Visita
     * const Visita = await prisma.visita.delete({
     *   where: {
     *     // ... filter to delete one Visita
     *   }
     * })
     * 
     */
    delete<T extends VisitaDeleteArgs>(args: SelectSubset<T, VisitaDeleteArgs<ExtArgs>>): Prisma__VisitaClient<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Visita.
     * @param {VisitaUpdateArgs} args - Arguments to update one Visita.
     * @example
     * // Update one Visita
     * const visita = await prisma.visita.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VisitaUpdateArgs>(args: SelectSubset<T, VisitaUpdateArgs<ExtArgs>>): Prisma__VisitaClient<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Visitas.
     * @param {VisitaDeleteManyArgs} args - Arguments to filter Visitas to delete.
     * @example
     * // Delete a few Visitas
     * const { count } = await prisma.visita.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VisitaDeleteManyArgs>(args?: SelectSubset<T, VisitaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Visitas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Visitas
     * const visita = await prisma.visita.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VisitaUpdateManyArgs>(args: SelectSubset<T, VisitaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Visitas and returns the data updated in the database.
     * @param {VisitaUpdateManyAndReturnArgs} args - Arguments to update many Visitas.
     * @example
     * // Update many Visitas
     * const visita = await prisma.visita.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Visitas and only return the `id`
     * const visitaWithIdOnly = await prisma.visita.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VisitaUpdateManyAndReturnArgs>(args: SelectSubset<T, VisitaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Visita.
     * @param {VisitaUpsertArgs} args - Arguments to update or create a Visita.
     * @example
     * // Update or create a Visita
     * const visita = await prisma.visita.upsert({
     *   create: {
     *     // ... data to create a Visita
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Visita we want to update
     *   }
     * })
     */
    upsert<T extends VisitaUpsertArgs>(args: SelectSubset<T, VisitaUpsertArgs<ExtArgs>>): Prisma__VisitaClient<$Result.GetResult<Prisma.$VisitaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Visitas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitaCountArgs} args - Arguments to filter Visitas to count.
     * @example
     * // Count the number of Visitas
     * const count = await prisma.visita.count({
     *   where: {
     *     // ... the filter for the Visitas we want to count
     *   }
     * })
    **/
    count<T extends VisitaCountArgs>(
      args?: Subset<T, VisitaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisitaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Visita.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisitaAggregateArgs>(args: Subset<T, VisitaAggregateArgs>): Prisma.PrismaPromise<GetVisitaAggregateType<T>>

    /**
     * Group by Visita.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VisitaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VisitaGroupByArgs['orderBy'] }
        : { orderBy?: VisitaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VisitaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisitaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Visita model
   */
  readonly fields: VisitaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Visita.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VisitaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ponto<T extends PontoTuristicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PontoTuristicoDefaultArgs<ExtArgs>>): Prisma__PontoTuristicoClient<$Result.GetResult<Prisma.$PontoTuristicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Visita model
   */
  interface VisitaFieldRefs {
    readonly id: FieldRef<"Visita", 'Int'>
    readonly data: FieldRef<"Visita", 'DateTime'>
    readonly usuarioId: FieldRef<"Visita", 'Int'>
    readonly pontoId: FieldRef<"Visita", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Visita findUnique
   */
  export type VisitaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
    /**
     * Filter, which Visita to fetch.
     */
    where: VisitaWhereUniqueInput
  }

  /**
   * Visita findUniqueOrThrow
   */
  export type VisitaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
    /**
     * Filter, which Visita to fetch.
     */
    where: VisitaWhereUniqueInput
  }

  /**
   * Visita findFirst
   */
  export type VisitaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
    /**
     * Filter, which Visita to fetch.
     */
    where?: VisitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitas to fetch.
     */
    orderBy?: VisitaOrderByWithRelationInput | VisitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Visitas.
     */
    cursor?: VisitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Visitas.
     */
    distinct?: VisitaScalarFieldEnum | VisitaScalarFieldEnum[]
  }

  /**
   * Visita findFirstOrThrow
   */
  export type VisitaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
    /**
     * Filter, which Visita to fetch.
     */
    where?: VisitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitas to fetch.
     */
    orderBy?: VisitaOrderByWithRelationInput | VisitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Visitas.
     */
    cursor?: VisitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Visitas.
     */
    distinct?: VisitaScalarFieldEnum | VisitaScalarFieldEnum[]
  }

  /**
   * Visita findMany
   */
  export type VisitaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
    /**
     * Filter, which Visitas to fetch.
     */
    where?: VisitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitas to fetch.
     */
    orderBy?: VisitaOrderByWithRelationInput | VisitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Visitas.
     */
    cursor?: VisitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitas.
     */
    skip?: number
    distinct?: VisitaScalarFieldEnum | VisitaScalarFieldEnum[]
  }

  /**
   * Visita create
   */
  export type VisitaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
    /**
     * The data needed to create a Visita.
     */
    data: XOR<VisitaCreateInput, VisitaUncheckedCreateInput>
  }

  /**
   * Visita createMany
   */
  export type VisitaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Visitas.
     */
    data: VisitaCreateManyInput | VisitaCreateManyInput[]
  }

  /**
   * Visita createManyAndReturn
   */
  export type VisitaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * The data used to create many Visitas.
     */
    data: VisitaCreateManyInput | VisitaCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Visita update
   */
  export type VisitaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
    /**
     * The data needed to update a Visita.
     */
    data: XOR<VisitaUpdateInput, VisitaUncheckedUpdateInput>
    /**
     * Choose, which Visita to update.
     */
    where: VisitaWhereUniqueInput
  }

  /**
   * Visita updateMany
   */
  export type VisitaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Visitas.
     */
    data: XOR<VisitaUpdateManyMutationInput, VisitaUncheckedUpdateManyInput>
    /**
     * Filter which Visitas to update
     */
    where?: VisitaWhereInput
    /**
     * Limit how many Visitas to update.
     */
    limit?: number
  }

  /**
   * Visita updateManyAndReturn
   */
  export type VisitaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * The data used to update Visitas.
     */
    data: XOR<VisitaUpdateManyMutationInput, VisitaUncheckedUpdateManyInput>
    /**
     * Filter which Visitas to update
     */
    where?: VisitaWhereInput
    /**
     * Limit how many Visitas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Visita upsert
   */
  export type VisitaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
    /**
     * The filter to search for the Visita to update in case it exists.
     */
    where: VisitaWhereUniqueInput
    /**
     * In case the Visita found by the `where` argument doesn't exist, create a new Visita with this data.
     */
    create: XOR<VisitaCreateInput, VisitaUncheckedCreateInput>
    /**
     * In case the Visita was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VisitaUpdateInput, VisitaUncheckedUpdateInput>
  }

  /**
   * Visita delete
   */
  export type VisitaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
    /**
     * Filter which Visita to delete.
     */
    where: VisitaWhereUniqueInput
  }

  /**
   * Visita deleteMany
   */
  export type VisitaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Visitas to delete
     */
    where?: VisitaWhereInput
    /**
     * Limit how many Visitas to delete.
     */
    limit?: number
  }

  /**
   * Visita without action
   */
  export type VisitaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visita
     */
    select?: VisitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Visita
     */
    omit?: VisitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitaInclude<ExtArgs> | null
  }


  /**
   * Model Conquista
   */

  export type AggregateConquista = {
    _count: ConquistaCountAggregateOutputType | null
    _avg: ConquistaAvgAggregateOutputType | null
    _sum: ConquistaSumAggregateOutputType | null
    _min: ConquistaMinAggregateOutputType | null
    _max: ConquistaMaxAggregateOutputType | null
  }

  export type ConquistaAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type ConquistaSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type ConquistaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    data: Date | null
    usuarioId: number | null
  }

  export type ConquistaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    data: Date | null
    usuarioId: number | null
  }

  export type ConquistaCountAggregateOutputType = {
    id: number
    nome: number
    data: number
    usuarioId: number
    _all: number
  }


  export type ConquistaAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type ConquistaSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type ConquistaMinAggregateInputType = {
    id?: true
    nome?: true
    data?: true
    usuarioId?: true
  }

  export type ConquistaMaxAggregateInputType = {
    id?: true
    nome?: true
    data?: true
    usuarioId?: true
  }

  export type ConquistaCountAggregateInputType = {
    id?: true
    nome?: true
    data?: true
    usuarioId?: true
    _all?: true
  }

  export type ConquistaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conquista to aggregate.
     */
    where?: ConquistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conquistas to fetch.
     */
    orderBy?: ConquistaOrderByWithRelationInput | ConquistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConquistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conquistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conquistas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conquistas
    **/
    _count?: true | ConquistaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConquistaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConquistaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConquistaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConquistaMaxAggregateInputType
  }

  export type GetConquistaAggregateType<T extends ConquistaAggregateArgs> = {
        [P in keyof T & keyof AggregateConquista]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConquista[P]>
      : GetScalarType<T[P], AggregateConquista[P]>
  }




  export type ConquistaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConquistaWhereInput
    orderBy?: ConquistaOrderByWithAggregationInput | ConquistaOrderByWithAggregationInput[]
    by: ConquistaScalarFieldEnum[] | ConquistaScalarFieldEnum
    having?: ConquistaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConquistaCountAggregateInputType | true
    _avg?: ConquistaAvgAggregateInputType
    _sum?: ConquistaSumAggregateInputType
    _min?: ConquistaMinAggregateInputType
    _max?: ConquistaMaxAggregateInputType
  }

  export type ConquistaGroupByOutputType = {
    id: number
    nome: string
    data: Date
    usuarioId: number
    _count: ConquistaCountAggregateOutputType | null
    _avg: ConquistaAvgAggregateOutputType | null
    _sum: ConquistaSumAggregateOutputType | null
    _min: ConquistaMinAggregateOutputType | null
    _max: ConquistaMaxAggregateOutputType | null
  }

  type GetConquistaGroupByPayload<T extends ConquistaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConquistaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConquistaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConquistaGroupByOutputType[P]>
            : GetScalarType<T[P], ConquistaGroupByOutputType[P]>
        }
      >
    >


  export type ConquistaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    data?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conquista"]>

  export type ConquistaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    data?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conquista"]>

  export type ConquistaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    data?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conquista"]>

  export type ConquistaSelectScalar = {
    id?: boolean
    nome?: boolean
    data?: boolean
    usuarioId?: boolean
  }

  export type ConquistaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "data" | "usuarioId", ExtArgs["result"]["conquista"]>
  export type ConquistaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type ConquistaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type ConquistaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $ConquistaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Conquista"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      data: Date
      usuarioId: number
    }, ExtArgs["result"]["conquista"]>
    composites: {}
  }

  type ConquistaGetPayload<S extends boolean | null | undefined | ConquistaDefaultArgs> = $Result.GetResult<Prisma.$ConquistaPayload, S>

  type ConquistaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConquistaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConquistaCountAggregateInputType | true
    }

  export interface ConquistaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conquista'], meta: { name: 'Conquista' } }
    /**
     * Find zero or one Conquista that matches the filter.
     * @param {ConquistaFindUniqueArgs} args - Arguments to find a Conquista
     * @example
     * // Get one Conquista
     * const conquista = await prisma.conquista.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConquistaFindUniqueArgs>(args: SelectSubset<T, ConquistaFindUniqueArgs<ExtArgs>>): Prisma__ConquistaClient<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Conquista that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConquistaFindUniqueOrThrowArgs} args - Arguments to find a Conquista
     * @example
     * // Get one Conquista
     * const conquista = await prisma.conquista.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConquistaFindUniqueOrThrowArgs>(args: SelectSubset<T, ConquistaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConquistaClient<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Conquista that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConquistaFindFirstArgs} args - Arguments to find a Conquista
     * @example
     * // Get one Conquista
     * const conquista = await prisma.conquista.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConquistaFindFirstArgs>(args?: SelectSubset<T, ConquistaFindFirstArgs<ExtArgs>>): Prisma__ConquistaClient<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Conquista that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConquistaFindFirstOrThrowArgs} args - Arguments to find a Conquista
     * @example
     * // Get one Conquista
     * const conquista = await prisma.conquista.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConquistaFindFirstOrThrowArgs>(args?: SelectSubset<T, ConquistaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConquistaClient<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Conquistas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConquistaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conquistas
     * const conquistas = await prisma.conquista.findMany()
     * 
     * // Get first 10 Conquistas
     * const conquistas = await prisma.conquista.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conquistaWithIdOnly = await prisma.conquista.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConquistaFindManyArgs>(args?: SelectSubset<T, ConquistaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Conquista.
     * @param {ConquistaCreateArgs} args - Arguments to create a Conquista.
     * @example
     * // Create one Conquista
     * const Conquista = await prisma.conquista.create({
     *   data: {
     *     // ... data to create a Conquista
     *   }
     * })
     * 
     */
    create<T extends ConquistaCreateArgs>(args: SelectSubset<T, ConquistaCreateArgs<ExtArgs>>): Prisma__ConquistaClient<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Conquistas.
     * @param {ConquistaCreateManyArgs} args - Arguments to create many Conquistas.
     * @example
     * // Create many Conquistas
     * const conquista = await prisma.conquista.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConquistaCreateManyArgs>(args?: SelectSubset<T, ConquistaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Conquistas and returns the data saved in the database.
     * @param {ConquistaCreateManyAndReturnArgs} args - Arguments to create many Conquistas.
     * @example
     * // Create many Conquistas
     * const conquista = await prisma.conquista.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Conquistas and only return the `id`
     * const conquistaWithIdOnly = await prisma.conquista.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConquistaCreateManyAndReturnArgs>(args?: SelectSubset<T, ConquistaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Conquista.
     * @param {ConquistaDeleteArgs} args - Arguments to delete one Conquista.
     * @example
     * // Delete one Conquista
     * const Conquista = await prisma.conquista.delete({
     *   where: {
     *     // ... filter to delete one Conquista
     *   }
     * })
     * 
     */
    delete<T extends ConquistaDeleteArgs>(args: SelectSubset<T, ConquistaDeleteArgs<ExtArgs>>): Prisma__ConquistaClient<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Conquista.
     * @param {ConquistaUpdateArgs} args - Arguments to update one Conquista.
     * @example
     * // Update one Conquista
     * const conquista = await prisma.conquista.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConquistaUpdateArgs>(args: SelectSubset<T, ConquistaUpdateArgs<ExtArgs>>): Prisma__ConquistaClient<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Conquistas.
     * @param {ConquistaDeleteManyArgs} args - Arguments to filter Conquistas to delete.
     * @example
     * // Delete a few Conquistas
     * const { count } = await prisma.conquista.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConquistaDeleteManyArgs>(args?: SelectSubset<T, ConquistaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conquistas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConquistaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conquistas
     * const conquista = await prisma.conquista.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConquistaUpdateManyArgs>(args: SelectSubset<T, ConquistaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conquistas and returns the data updated in the database.
     * @param {ConquistaUpdateManyAndReturnArgs} args - Arguments to update many Conquistas.
     * @example
     * // Update many Conquistas
     * const conquista = await prisma.conquista.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Conquistas and only return the `id`
     * const conquistaWithIdOnly = await prisma.conquista.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConquistaUpdateManyAndReturnArgs>(args: SelectSubset<T, ConquistaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Conquista.
     * @param {ConquistaUpsertArgs} args - Arguments to update or create a Conquista.
     * @example
     * // Update or create a Conquista
     * const conquista = await prisma.conquista.upsert({
     *   create: {
     *     // ... data to create a Conquista
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conquista we want to update
     *   }
     * })
     */
    upsert<T extends ConquistaUpsertArgs>(args: SelectSubset<T, ConquistaUpsertArgs<ExtArgs>>): Prisma__ConquistaClient<$Result.GetResult<Prisma.$ConquistaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Conquistas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConquistaCountArgs} args - Arguments to filter Conquistas to count.
     * @example
     * // Count the number of Conquistas
     * const count = await prisma.conquista.count({
     *   where: {
     *     // ... the filter for the Conquistas we want to count
     *   }
     * })
    **/
    count<T extends ConquistaCountArgs>(
      args?: Subset<T, ConquistaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConquistaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conquista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConquistaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConquistaAggregateArgs>(args: Subset<T, ConquistaAggregateArgs>): Prisma.PrismaPromise<GetConquistaAggregateType<T>>

    /**
     * Group by Conquista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConquistaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConquistaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConquistaGroupByArgs['orderBy'] }
        : { orderBy?: ConquistaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConquistaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConquistaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conquista model
   */
  readonly fields: ConquistaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conquista.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConquistaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Conquista model
   */
  interface ConquistaFieldRefs {
    readonly id: FieldRef<"Conquista", 'Int'>
    readonly nome: FieldRef<"Conquista", 'String'>
    readonly data: FieldRef<"Conquista", 'DateTime'>
    readonly usuarioId: FieldRef<"Conquista", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Conquista findUnique
   */
  export type ConquistaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaInclude<ExtArgs> | null
    /**
     * Filter, which Conquista to fetch.
     */
    where: ConquistaWhereUniqueInput
  }

  /**
   * Conquista findUniqueOrThrow
   */
  export type ConquistaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaInclude<ExtArgs> | null
    /**
     * Filter, which Conquista to fetch.
     */
    where: ConquistaWhereUniqueInput
  }

  /**
   * Conquista findFirst
   */
  export type ConquistaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaInclude<ExtArgs> | null
    /**
     * Filter, which Conquista to fetch.
     */
    where?: ConquistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conquistas to fetch.
     */
    orderBy?: ConquistaOrderByWithRelationInput | ConquistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conquistas.
     */
    cursor?: ConquistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conquistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conquistas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conquistas.
     */
    distinct?: ConquistaScalarFieldEnum | ConquistaScalarFieldEnum[]
  }

  /**
   * Conquista findFirstOrThrow
   */
  export type ConquistaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaInclude<ExtArgs> | null
    /**
     * Filter, which Conquista to fetch.
     */
    where?: ConquistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conquistas to fetch.
     */
    orderBy?: ConquistaOrderByWithRelationInput | ConquistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conquistas.
     */
    cursor?: ConquistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conquistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conquistas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conquistas.
     */
    distinct?: ConquistaScalarFieldEnum | ConquistaScalarFieldEnum[]
  }

  /**
   * Conquista findMany
   */
  export type ConquistaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaInclude<ExtArgs> | null
    /**
     * Filter, which Conquistas to fetch.
     */
    where?: ConquistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conquistas to fetch.
     */
    orderBy?: ConquistaOrderByWithRelationInput | ConquistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conquistas.
     */
    cursor?: ConquistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conquistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conquistas.
     */
    skip?: number
    distinct?: ConquistaScalarFieldEnum | ConquistaScalarFieldEnum[]
  }

  /**
   * Conquista create
   */
  export type ConquistaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaInclude<ExtArgs> | null
    /**
     * The data needed to create a Conquista.
     */
    data: XOR<ConquistaCreateInput, ConquistaUncheckedCreateInput>
  }

  /**
   * Conquista createMany
   */
  export type ConquistaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conquistas.
     */
    data: ConquistaCreateManyInput | ConquistaCreateManyInput[]
  }

  /**
   * Conquista createManyAndReturn
   */
  export type ConquistaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * The data used to create many Conquistas.
     */
    data: ConquistaCreateManyInput | ConquistaCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Conquista update
   */
  export type ConquistaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaInclude<ExtArgs> | null
    /**
     * The data needed to update a Conquista.
     */
    data: XOR<ConquistaUpdateInput, ConquistaUncheckedUpdateInput>
    /**
     * Choose, which Conquista to update.
     */
    where: ConquistaWhereUniqueInput
  }

  /**
   * Conquista updateMany
   */
  export type ConquistaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conquistas.
     */
    data: XOR<ConquistaUpdateManyMutationInput, ConquistaUncheckedUpdateManyInput>
    /**
     * Filter which Conquistas to update
     */
    where?: ConquistaWhereInput
    /**
     * Limit how many Conquistas to update.
     */
    limit?: number
  }

  /**
   * Conquista updateManyAndReturn
   */
  export type ConquistaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * The data used to update Conquistas.
     */
    data: XOR<ConquistaUpdateManyMutationInput, ConquistaUncheckedUpdateManyInput>
    /**
     * Filter which Conquistas to update
     */
    where?: ConquistaWhereInput
    /**
     * Limit how many Conquistas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Conquista upsert
   */
  export type ConquistaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaInclude<ExtArgs> | null
    /**
     * The filter to search for the Conquista to update in case it exists.
     */
    where: ConquistaWhereUniqueInput
    /**
     * In case the Conquista found by the `where` argument doesn't exist, create a new Conquista with this data.
     */
    create: XOR<ConquistaCreateInput, ConquistaUncheckedCreateInput>
    /**
     * In case the Conquista was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConquistaUpdateInput, ConquistaUncheckedUpdateInput>
  }

  /**
   * Conquista delete
   */
  export type ConquistaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaInclude<ExtArgs> | null
    /**
     * Filter which Conquista to delete.
     */
    where: ConquistaWhereUniqueInput
  }

  /**
   * Conquista deleteMany
   */
  export type ConquistaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conquistas to delete
     */
    where?: ConquistaWhereInput
    /**
     * Limit how many Conquistas to delete.
     */
    limit?: number
  }

  /**
   * Conquista without action
   */
  export type ConquistaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conquista
     */
    select?: ConquistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conquista
     */
    omit?: ConquistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConquistaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    foto: 'foto'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const PontoTuristicoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    latitude: 'latitude',
    longitude: 'longitude',
    categoria: 'categoria',
    acessibilidade: 'acessibilidade',
    fotos: 'fotos'
  };

  export type PontoTuristicoScalarFieldEnum = (typeof PontoTuristicoScalarFieldEnum)[keyof typeof PontoTuristicoScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    texto: 'texto',
    estrelas: 'estrelas',
    tipo: 'tipo',
    usuarioId: 'usuarioId',
    pontoId: 'pontoId'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const VisitaScalarFieldEnum: {
    id: 'id',
    data: 'data',
    usuarioId: 'usuarioId',
    pontoId: 'pontoId'
  };

  export type VisitaScalarFieldEnum = (typeof VisitaScalarFieldEnum)[keyof typeof VisitaScalarFieldEnum]


  export const ConquistaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    data: 'data',
    usuarioId: 'usuarioId'
  };

  export type ConquistaScalarFieldEnum = (typeof ConquistaScalarFieldEnum)[keyof typeof ConquistaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    foto?: StringNullableFilter<"Usuario"> | string | null
    conquistas?: ConquistaListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    visitas?: VisitaListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    foto?: SortOrderInput | SortOrder
    conquistas?: ConquistaOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    visitas?: VisitaOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    foto?: StringNullableFilter<"Usuario"> | string | null
    conquistas?: ConquistaListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    visitas?: VisitaListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    foto?: SortOrderInput | SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    foto?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
  }

  export type PontoTuristicoWhereInput = {
    AND?: PontoTuristicoWhereInput | PontoTuristicoWhereInput[]
    OR?: PontoTuristicoWhereInput[]
    NOT?: PontoTuristicoWhereInput | PontoTuristicoWhereInput[]
    id?: IntFilter<"PontoTuristico"> | number
    nome?: StringFilter<"PontoTuristico"> | string
    descricao?: StringFilter<"PontoTuristico"> | string
    latitude?: FloatFilter<"PontoTuristico"> | number
    longitude?: FloatFilter<"PontoTuristico"> | number
    categoria?: StringFilter<"PontoTuristico"> | string
    acessibilidade?: BoolFilter<"PontoTuristico"> | boolean
    fotos?: StringFilter<"PontoTuristico"> | string
    feedbacks?: FeedbackListRelationFilter
    visitas?: VisitaListRelationFilter
  }

  export type PontoTuristicoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    categoria?: SortOrder
    acessibilidade?: SortOrder
    fotos?: SortOrder
    feedbacks?: FeedbackOrderByRelationAggregateInput
    visitas?: VisitaOrderByRelationAggregateInput
  }

  export type PontoTuristicoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PontoTuristicoWhereInput | PontoTuristicoWhereInput[]
    OR?: PontoTuristicoWhereInput[]
    NOT?: PontoTuristicoWhereInput | PontoTuristicoWhereInput[]
    nome?: StringFilter<"PontoTuristico"> | string
    descricao?: StringFilter<"PontoTuristico"> | string
    latitude?: FloatFilter<"PontoTuristico"> | number
    longitude?: FloatFilter<"PontoTuristico"> | number
    categoria?: StringFilter<"PontoTuristico"> | string
    acessibilidade?: BoolFilter<"PontoTuristico"> | boolean
    fotos?: StringFilter<"PontoTuristico"> | string
    feedbacks?: FeedbackListRelationFilter
    visitas?: VisitaListRelationFilter
  }, "id">

  export type PontoTuristicoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    categoria?: SortOrder
    acessibilidade?: SortOrder
    fotos?: SortOrder
    _count?: PontoTuristicoCountOrderByAggregateInput
    _avg?: PontoTuristicoAvgOrderByAggregateInput
    _max?: PontoTuristicoMaxOrderByAggregateInput
    _min?: PontoTuristicoMinOrderByAggregateInput
    _sum?: PontoTuristicoSumOrderByAggregateInput
  }

  export type PontoTuristicoScalarWhereWithAggregatesInput = {
    AND?: PontoTuristicoScalarWhereWithAggregatesInput | PontoTuristicoScalarWhereWithAggregatesInput[]
    OR?: PontoTuristicoScalarWhereWithAggregatesInput[]
    NOT?: PontoTuristicoScalarWhereWithAggregatesInput | PontoTuristicoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PontoTuristico"> | number
    nome?: StringWithAggregatesFilter<"PontoTuristico"> | string
    descricao?: StringWithAggregatesFilter<"PontoTuristico"> | string
    latitude?: FloatWithAggregatesFilter<"PontoTuristico"> | number
    longitude?: FloatWithAggregatesFilter<"PontoTuristico"> | number
    categoria?: StringWithAggregatesFilter<"PontoTuristico"> | string
    acessibilidade?: BoolWithAggregatesFilter<"PontoTuristico"> | boolean
    fotos?: StringWithAggregatesFilter<"PontoTuristico"> | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: IntFilter<"Feedback"> | number
    texto?: StringFilter<"Feedback"> | string
    estrelas?: IntFilter<"Feedback"> | number
    tipo?: StringFilter<"Feedback"> | string
    usuarioId?: IntFilter<"Feedback"> | number
    pontoId?: IntFilter<"Feedback"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    ponto?: XOR<PontoTuristicoScalarRelationFilter, PontoTuristicoWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    texto?: SortOrder
    estrelas?: SortOrder
    tipo?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    ponto?: PontoTuristicoOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    texto?: StringFilter<"Feedback"> | string
    estrelas?: IntFilter<"Feedback"> | number
    tipo?: StringFilter<"Feedback"> | string
    usuarioId?: IntFilter<"Feedback"> | number
    pontoId?: IntFilter<"Feedback"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    ponto?: XOR<PontoTuristicoScalarRelationFilter, PontoTuristicoWhereInput>
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    texto?: SortOrder
    estrelas?: SortOrder
    tipo?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Feedback"> | number
    texto?: StringWithAggregatesFilter<"Feedback"> | string
    estrelas?: IntWithAggregatesFilter<"Feedback"> | number
    tipo?: StringWithAggregatesFilter<"Feedback"> | string
    usuarioId?: IntWithAggregatesFilter<"Feedback"> | number
    pontoId?: IntWithAggregatesFilter<"Feedback"> | number
  }

  export type VisitaWhereInput = {
    AND?: VisitaWhereInput | VisitaWhereInput[]
    OR?: VisitaWhereInput[]
    NOT?: VisitaWhereInput | VisitaWhereInput[]
    id?: IntFilter<"Visita"> | number
    data?: DateTimeFilter<"Visita"> | Date | string
    usuarioId?: IntFilter<"Visita"> | number
    pontoId?: IntFilter<"Visita"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    ponto?: XOR<PontoTuristicoScalarRelationFilter, PontoTuristicoWhereInput>
  }

  export type VisitaOrderByWithRelationInput = {
    id?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    ponto?: PontoTuristicoOrderByWithRelationInput
  }

  export type VisitaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VisitaWhereInput | VisitaWhereInput[]
    OR?: VisitaWhereInput[]
    NOT?: VisitaWhereInput | VisitaWhereInput[]
    data?: DateTimeFilter<"Visita"> | Date | string
    usuarioId?: IntFilter<"Visita"> | number
    pontoId?: IntFilter<"Visita"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    ponto?: XOR<PontoTuristicoScalarRelationFilter, PontoTuristicoWhereInput>
  }, "id">

  export type VisitaOrderByWithAggregationInput = {
    id?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
    _count?: VisitaCountOrderByAggregateInput
    _avg?: VisitaAvgOrderByAggregateInput
    _max?: VisitaMaxOrderByAggregateInput
    _min?: VisitaMinOrderByAggregateInput
    _sum?: VisitaSumOrderByAggregateInput
  }

  export type VisitaScalarWhereWithAggregatesInput = {
    AND?: VisitaScalarWhereWithAggregatesInput | VisitaScalarWhereWithAggregatesInput[]
    OR?: VisitaScalarWhereWithAggregatesInput[]
    NOT?: VisitaScalarWhereWithAggregatesInput | VisitaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Visita"> | number
    data?: DateTimeWithAggregatesFilter<"Visita"> | Date | string
    usuarioId?: IntWithAggregatesFilter<"Visita"> | number
    pontoId?: IntWithAggregatesFilter<"Visita"> | number
  }

  export type ConquistaWhereInput = {
    AND?: ConquistaWhereInput | ConquistaWhereInput[]
    OR?: ConquistaWhereInput[]
    NOT?: ConquistaWhereInput | ConquistaWhereInput[]
    id?: IntFilter<"Conquista"> | number
    nome?: StringFilter<"Conquista"> | string
    data?: DateTimeFilter<"Conquista"> | Date | string
    usuarioId?: IntFilter<"Conquista"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type ConquistaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type ConquistaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConquistaWhereInput | ConquistaWhereInput[]
    OR?: ConquistaWhereInput[]
    NOT?: ConquistaWhereInput | ConquistaWhereInput[]
    nome?: StringFilter<"Conquista"> | string
    data?: DateTimeFilter<"Conquista"> | Date | string
    usuarioId?: IntFilter<"Conquista"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type ConquistaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
    _count?: ConquistaCountOrderByAggregateInput
    _avg?: ConquistaAvgOrderByAggregateInput
    _max?: ConquistaMaxOrderByAggregateInput
    _min?: ConquistaMinOrderByAggregateInput
    _sum?: ConquistaSumOrderByAggregateInput
  }

  export type ConquistaScalarWhereWithAggregatesInput = {
    AND?: ConquistaScalarWhereWithAggregatesInput | ConquistaScalarWhereWithAggregatesInput[]
    OR?: ConquistaScalarWhereWithAggregatesInput[]
    NOT?: ConquistaScalarWhereWithAggregatesInput | ConquistaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Conquista"> | number
    nome?: StringWithAggregatesFilter<"Conquista"> | string
    data?: DateTimeWithAggregatesFilter<"Conquista"> | Date | string
    usuarioId?: IntWithAggregatesFilter<"Conquista"> | number
  }

  export type UsuarioCreateInput = {
    nome: string
    email: string
    foto?: string | null
    conquistas?: ConquistaCreateNestedManyWithoutUsuarioInput
    feedbacks?: FeedbackCreateNestedManyWithoutUsuarioInput
    visitas?: VisitaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    foto?: string | null
    conquistas?: ConquistaUncheckedCreateNestedManyWithoutUsuarioInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUsuarioInput
    visitas?: VisitaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    conquistas?: ConquistaUpdateManyWithoutUsuarioNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUsuarioNestedInput
    visitas?: VisitaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    conquistas?: ConquistaUncheckedUpdateManyWithoutUsuarioNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUsuarioNestedInput
    visitas?: VisitaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nome: string
    email: string
    foto?: string | null
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PontoTuristicoCreateInput = {
    nome: string
    descricao: string
    latitude: number
    longitude: number
    categoria: string
    acessibilidade: boolean
    fotos: string
    feedbacks?: FeedbackCreateNestedManyWithoutPontoInput
    visitas?: VisitaCreateNestedManyWithoutPontoInput
  }

  export type PontoTuristicoUncheckedCreateInput = {
    id?: number
    nome: string
    descricao: string
    latitude: number
    longitude: number
    categoria: string
    acessibilidade: boolean
    fotos: string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutPontoInput
    visitas?: VisitaUncheckedCreateNestedManyWithoutPontoInput
  }

  export type PontoTuristicoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    acessibilidade?: BoolFieldUpdateOperationsInput | boolean
    fotos?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUpdateManyWithoutPontoNestedInput
    visitas?: VisitaUpdateManyWithoutPontoNestedInput
  }

  export type PontoTuristicoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    acessibilidade?: BoolFieldUpdateOperationsInput | boolean
    fotos?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutPontoNestedInput
    visitas?: VisitaUncheckedUpdateManyWithoutPontoNestedInput
  }

  export type PontoTuristicoCreateManyInput = {
    id?: number
    nome: string
    descricao: string
    latitude: number
    longitude: number
    categoria: string
    acessibilidade: boolean
    fotos: string
  }

  export type PontoTuristicoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    acessibilidade?: BoolFieldUpdateOperationsInput | boolean
    fotos?: StringFieldUpdateOperationsInput | string
  }

  export type PontoTuristicoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    acessibilidade?: BoolFieldUpdateOperationsInput | boolean
    fotos?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateInput = {
    texto: string
    estrelas: number
    tipo: string
    usuario: UsuarioCreateNestedOneWithoutFeedbacksInput
    ponto: PontoTuristicoCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: number
    texto: string
    estrelas: number
    tipo: string
    usuarioId: number
    pontoId: number
  }

  export type FeedbackUpdateInput = {
    texto?: StringFieldUpdateOperationsInput | string
    estrelas?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutFeedbacksNestedInput
    ponto?: PontoTuristicoUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    estrelas?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    pontoId?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackCreateManyInput = {
    id?: number
    texto: string
    estrelas: number
    tipo: string
    usuarioId: number
    pontoId: number
  }

  export type FeedbackUpdateManyMutationInput = {
    texto?: StringFieldUpdateOperationsInput | string
    estrelas?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    estrelas?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    pontoId?: IntFieldUpdateOperationsInput | number
  }

  export type VisitaCreateInput = {
    data?: Date | string
    usuario: UsuarioCreateNestedOneWithoutVisitasInput
    ponto: PontoTuristicoCreateNestedOneWithoutVisitasInput
  }

  export type VisitaUncheckedCreateInput = {
    id?: number
    data?: Date | string
    usuarioId: number
    pontoId: number
  }

  export type VisitaUpdateInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutVisitasNestedInput
    ponto?: PontoTuristicoUpdateOneRequiredWithoutVisitasNestedInput
  }

  export type VisitaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    pontoId?: IntFieldUpdateOperationsInput | number
  }

  export type VisitaCreateManyInput = {
    id?: number
    data?: Date | string
    usuarioId: number
    pontoId: number
  }

  export type VisitaUpdateManyMutationInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisitaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    pontoId?: IntFieldUpdateOperationsInput | number
  }

  export type ConquistaCreateInput = {
    nome: string
    data?: Date | string
    usuario: UsuarioCreateNestedOneWithoutConquistasInput
  }

  export type ConquistaUncheckedCreateInput = {
    id?: number
    nome: string
    data?: Date | string
    usuarioId: number
  }

  export type ConquistaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutConquistasNestedInput
  }

  export type ConquistaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type ConquistaCreateManyInput = {
    id?: number
    nome: string
    data?: Date | string
    usuarioId: number
  }

  export type ConquistaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConquistaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ConquistaListRelationFilter = {
    every?: ConquistaWhereInput
    some?: ConquistaWhereInput
    none?: ConquistaWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type VisitaListRelationFilter = {
    every?: VisitaWhereInput
    some?: VisitaWhereInput
    none?: VisitaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ConquistaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VisitaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    foto?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    foto?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    foto?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PontoTuristicoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    categoria?: SortOrder
    acessibilidade?: SortOrder
    fotos?: SortOrder
  }

  export type PontoTuristicoAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type PontoTuristicoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    categoria?: SortOrder
    acessibilidade?: SortOrder
    fotos?: SortOrder
  }

  export type PontoTuristicoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    categoria?: SortOrder
    acessibilidade?: SortOrder
    fotos?: SortOrder
  }

  export type PontoTuristicoSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type PontoTuristicoScalarRelationFilter = {
    is?: PontoTuristicoWhereInput
    isNot?: PontoTuristicoWhereInput
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
    estrelas?: SortOrder
    tipo?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    estrelas?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
    estrelas?: SortOrder
    tipo?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
    estrelas?: SortOrder
    tipo?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    estrelas?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type VisitaCountOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
  }

  export type VisitaAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
  }

  export type VisitaMaxOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
  }

  export type VisitaMinOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
  }

  export type VisitaSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    pontoId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ConquistaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
  }

  export type ConquistaAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type ConquistaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
  }

  export type ConquistaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
  }

  export type ConquistaSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type ConquistaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ConquistaCreateWithoutUsuarioInput, ConquistaUncheckedCreateWithoutUsuarioInput> | ConquistaCreateWithoutUsuarioInput[] | ConquistaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ConquistaCreateOrConnectWithoutUsuarioInput | ConquistaCreateOrConnectWithoutUsuarioInput[]
    createMany?: ConquistaCreateManyUsuarioInputEnvelope
    connect?: ConquistaWhereUniqueInput | ConquistaWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<FeedbackCreateWithoutUsuarioInput, FeedbackUncheckedCreateWithoutUsuarioInput> | FeedbackCreateWithoutUsuarioInput[] | FeedbackUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUsuarioInput | FeedbackCreateOrConnectWithoutUsuarioInput[]
    createMany?: FeedbackCreateManyUsuarioInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type VisitaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<VisitaCreateWithoutUsuarioInput, VisitaUncheckedCreateWithoutUsuarioInput> | VisitaCreateWithoutUsuarioInput[] | VisitaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VisitaCreateOrConnectWithoutUsuarioInput | VisitaCreateOrConnectWithoutUsuarioInput[]
    createMany?: VisitaCreateManyUsuarioInputEnvelope
    connect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
  }

  export type ConquistaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ConquistaCreateWithoutUsuarioInput, ConquistaUncheckedCreateWithoutUsuarioInput> | ConquistaCreateWithoutUsuarioInput[] | ConquistaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ConquistaCreateOrConnectWithoutUsuarioInput | ConquistaCreateOrConnectWithoutUsuarioInput[]
    createMany?: ConquistaCreateManyUsuarioInputEnvelope
    connect?: ConquistaWhereUniqueInput | ConquistaWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<FeedbackCreateWithoutUsuarioInput, FeedbackUncheckedCreateWithoutUsuarioInput> | FeedbackCreateWithoutUsuarioInput[] | FeedbackUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUsuarioInput | FeedbackCreateOrConnectWithoutUsuarioInput[]
    createMany?: FeedbackCreateManyUsuarioInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type VisitaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<VisitaCreateWithoutUsuarioInput, VisitaUncheckedCreateWithoutUsuarioInput> | VisitaCreateWithoutUsuarioInput[] | VisitaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VisitaCreateOrConnectWithoutUsuarioInput | VisitaCreateOrConnectWithoutUsuarioInput[]
    createMany?: VisitaCreateManyUsuarioInputEnvelope
    connect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ConquistaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ConquistaCreateWithoutUsuarioInput, ConquistaUncheckedCreateWithoutUsuarioInput> | ConquistaCreateWithoutUsuarioInput[] | ConquistaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ConquistaCreateOrConnectWithoutUsuarioInput | ConquistaCreateOrConnectWithoutUsuarioInput[]
    upsert?: ConquistaUpsertWithWhereUniqueWithoutUsuarioInput | ConquistaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ConquistaCreateManyUsuarioInputEnvelope
    set?: ConquistaWhereUniqueInput | ConquistaWhereUniqueInput[]
    disconnect?: ConquistaWhereUniqueInput | ConquistaWhereUniqueInput[]
    delete?: ConquistaWhereUniqueInput | ConquistaWhereUniqueInput[]
    connect?: ConquistaWhereUniqueInput | ConquistaWhereUniqueInput[]
    update?: ConquistaUpdateWithWhereUniqueWithoutUsuarioInput | ConquistaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ConquistaUpdateManyWithWhereWithoutUsuarioInput | ConquistaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ConquistaScalarWhereInput | ConquistaScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<FeedbackCreateWithoutUsuarioInput, FeedbackUncheckedCreateWithoutUsuarioInput> | FeedbackCreateWithoutUsuarioInput[] | FeedbackUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUsuarioInput | FeedbackCreateOrConnectWithoutUsuarioInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUsuarioInput | FeedbackUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: FeedbackCreateManyUsuarioInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUsuarioInput | FeedbackUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUsuarioInput | FeedbackUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type VisitaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<VisitaCreateWithoutUsuarioInput, VisitaUncheckedCreateWithoutUsuarioInput> | VisitaCreateWithoutUsuarioInput[] | VisitaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VisitaCreateOrConnectWithoutUsuarioInput | VisitaCreateOrConnectWithoutUsuarioInput[]
    upsert?: VisitaUpsertWithWhereUniqueWithoutUsuarioInput | VisitaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: VisitaCreateManyUsuarioInputEnvelope
    set?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    disconnect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    delete?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    connect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    update?: VisitaUpdateWithWhereUniqueWithoutUsuarioInput | VisitaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: VisitaUpdateManyWithWhereWithoutUsuarioInput | VisitaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: VisitaScalarWhereInput | VisitaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ConquistaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ConquistaCreateWithoutUsuarioInput, ConquistaUncheckedCreateWithoutUsuarioInput> | ConquistaCreateWithoutUsuarioInput[] | ConquistaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ConquistaCreateOrConnectWithoutUsuarioInput | ConquistaCreateOrConnectWithoutUsuarioInput[]
    upsert?: ConquistaUpsertWithWhereUniqueWithoutUsuarioInput | ConquistaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ConquistaCreateManyUsuarioInputEnvelope
    set?: ConquistaWhereUniqueInput | ConquistaWhereUniqueInput[]
    disconnect?: ConquistaWhereUniqueInput | ConquistaWhereUniqueInput[]
    delete?: ConquistaWhereUniqueInput | ConquistaWhereUniqueInput[]
    connect?: ConquistaWhereUniqueInput | ConquistaWhereUniqueInput[]
    update?: ConquistaUpdateWithWhereUniqueWithoutUsuarioInput | ConquistaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ConquistaUpdateManyWithWhereWithoutUsuarioInput | ConquistaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ConquistaScalarWhereInput | ConquistaScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<FeedbackCreateWithoutUsuarioInput, FeedbackUncheckedCreateWithoutUsuarioInput> | FeedbackCreateWithoutUsuarioInput[] | FeedbackUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUsuarioInput | FeedbackCreateOrConnectWithoutUsuarioInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUsuarioInput | FeedbackUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: FeedbackCreateManyUsuarioInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUsuarioInput | FeedbackUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUsuarioInput | FeedbackUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type VisitaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<VisitaCreateWithoutUsuarioInput, VisitaUncheckedCreateWithoutUsuarioInput> | VisitaCreateWithoutUsuarioInput[] | VisitaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VisitaCreateOrConnectWithoutUsuarioInput | VisitaCreateOrConnectWithoutUsuarioInput[]
    upsert?: VisitaUpsertWithWhereUniqueWithoutUsuarioInput | VisitaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: VisitaCreateManyUsuarioInputEnvelope
    set?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    disconnect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    delete?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    connect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    update?: VisitaUpdateWithWhereUniqueWithoutUsuarioInput | VisitaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: VisitaUpdateManyWithWhereWithoutUsuarioInput | VisitaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: VisitaScalarWhereInput | VisitaScalarWhereInput[]
  }

  export type FeedbackCreateNestedManyWithoutPontoInput = {
    create?: XOR<FeedbackCreateWithoutPontoInput, FeedbackUncheckedCreateWithoutPontoInput> | FeedbackCreateWithoutPontoInput[] | FeedbackUncheckedCreateWithoutPontoInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutPontoInput | FeedbackCreateOrConnectWithoutPontoInput[]
    createMany?: FeedbackCreateManyPontoInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type VisitaCreateNestedManyWithoutPontoInput = {
    create?: XOR<VisitaCreateWithoutPontoInput, VisitaUncheckedCreateWithoutPontoInput> | VisitaCreateWithoutPontoInput[] | VisitaUncheckedCreateWithoutPontoInput[]
    connectOrCreate?: VisitaCreateOrConnectWithoutPontoInput | VisitaCreateOrConnectWithoutPontoInput[]
    createMany?: VisitaCreateManyPontoInputEnvelope
    connect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutPontoInput = {
    create?: XOR<FeedbackCreateWithoutPontoInput, FeedbackUncheckedCreateWithoutPontoInput> | FeedbackCreateWithoutPontoInput[] | FeedbackUncheckedCreateWithoutPontoInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutPontoInput | FeedbackCreateOrConnectWithoutPontoInput[]
    createMany?: FeedbackCreateManyPontoInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type VisitaUncheckedCreateNestedManyWithoutPontoInput = {
    create?: XOR<VisitaCreateWithoutPontoInput, VisitaUncheckedCreateWithoutPontoInput> | VisitaCreateWithoutPontoInput[] | VisitaUncheckedCreateWithoutPontoInput[]
    connectOrCreate?: VisitaCreateOrConnectWithoutPontoInput | VisitaCreateOrConnectWithoutPontoInput[]
    createMany?: VisitaCreateManyPontoInputEnvelope
    connect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FeedbackUpdateManyWithoutPontoNestedInput = {
    create?: XOR<FeedbackCreateWithoutPontoInput, FeedbackUncheckedCreateWithoutPontoInput> | FeedbackCreateWithoutPontoInput[] | FeedbackUncheckedCreateWithoutPontoInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutPontoInput | FeedbackCreateOrConnectWithoutPontoInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutPontoInput | FeedbackUpsertWithWhereUniqueWithoutPontoInput[]
    createMany?: FeedbackCreateManyPontoInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutPontoInput | FeedbackUpdateWithWhereUniqueWithoutPontoInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutPontoInput | FeedbackUpdateManyWithWhereWithoutPontoInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type VisitaUpdateManyWithoutPontoNestedInput = {
    create?: XOR<VisitaCreateWithoutPontoInput, VisitaUncheckedCreateWithoutPontoInput> | VisitaCreateWithoutPontoInput[] | VisitaUncheckedCreateWithoutPontoInput[]
    connectOrCreate?: VisitaCreateOrConnectWithoutPontoInput | VisitaCreateOrConnectWithoutPontoInput[]
    upsert?: VisitaUpsertWithWhereUniqueWithoutPontoInput | VisitaUpsertWithWhereUniqueWithoutPontoInput[]
    createMany?: VisitaCreateManyPontoInputEnvelope
    set?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    disconnect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    delete?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    connect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    update?: VisitaUpdateWithWhereUniqueWithoutPontoInput | VisitaUpdateWithWhereUniqueWithoutPontoInput[]
    updateMany?: VisitaUpdateManyWithWhereWithoutPontoInput | VisitaUpdateManyWithWhereWithoutPontoInput[]
    deleteMany?: VisitaScalarWhereInput | VisitaScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutPontoNestedInput = {
    create?: XOR<FeedbackCreateWithoutPontoInput, FeedbackUncheckedCreateWithoutPontoInput> | FeedbackCreateWithoutPontoInput[] | FeedbackUncheckedCreateWithoutPontoInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutPontoInput | FeedbackCreateOrConnectWithoutPontoInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutPontoInput | FeedbackUpsertWithWhereUniqueWithoutPontoInput[]
    createMany?: FeedbackCreateManyPontoInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutPontoInput | FeedbackUpdateWithWhereUniqueWithoutPontoInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutPontoInput | FeedbackUpdateManyWithWhereWithoutPontoInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type VisitaUncheckedUpdateManyWithoutPontoNestedInput = {
    create?: XOR<VisitaCreateWithoutPontoInput, VisitaUncheckedCreateWithoutPontoInput> | VisitaCreateWithoutPontoInput[] | VisitaUncheckedCreateWithoutPontoInput[]
    connectOrCreate?: VisitaCreateOrConnectWithoutPontoInput | VisitaCreateOrConnectWithoutPontoInput[]
    upsert?: VisitaUpsertWithWhereUniqueWithoutPontoInput | VisitaUpsertWithWhereUniqueWithoutPontoInput[]
    createMany?: VisitaCreateManyPontoInputEnvelope
    set?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    disconnect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    delete?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    connect?: VisitaWhereUniqueInput | VisitaWhereUniqueInput[]
    update?: VisitaUpdateWithWhereUniqueWithoutPontoInput | VisitaUpdateWithWhereUniqueWithoutPontoInput[]
    updateMany?: VisitaUpdateManyWithWhereWithoutPontoInput | VisitaUpdateManyWithWhereWithoutPontoInput[]
    deleteMany?: VisitaScalarWhereInput | VisitaScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<UsuarioCreateWithoutFeedbacksInput, UsuarioUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutFeedbacksInput
    connect?: UsuarioWhereUniqueInput
  }

  export type PontoTuristicoCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<PontoTuristicoCreateWithoutFeedbacksInput, PontoTuristicoUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: PontoTuristicoCreateOrConnectWithoutFeedbacksInput
    connect?: PontoTuristicoWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<UsuarioCreateWithoutFeedbacksInput, UsuarioUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutFeedbacksInput
    upsert?: UsuarioUpsertWithoutFeedbacksInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutFeedbacksInput, UsuarioUpdateWithoutFeedbacksInput>, UsuarioUncheckedUpdateWithoutFeedbacksInput>
  }

  export type PontoTuristicoUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<PontoTuristicoCreateWithoutFeedbacksInput, PontoTuristicoUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: PontoTuristicoCreateOrConnectWithoutFeedbacksInput
    upsert?: PontoTuristicoUpsertWithoutFeedbacksInput
    connect?: PontoTuristicoWhereUniqueInput
    update?: XOR<XOR<PontoTuristicoUpdateToOneWithWhereWithoutFeedbacksInput, PontoTuristicoUpdateWithoutFeedbacksInput>, PontoTuristicoUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UsuarioCreateNestedOneWithoutVisitasInput = {
    create?: XOR<UsuarioCreateWithoutVisitasInput, UsuarioUncheckedCreateWithoutVisitasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutVisitasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type PontoTuristicoCreateNestedOneWithoutVisitasInput = {
    create?: XOR<PontoTuristicoCreateWithoutVisitasInput, PontoTuristicoUncheckedCreateWithoutVisitasInput>
    connectOrCreate?: PontoTuristicoCreateOrConnectWithoutVisitasInput
    connect?: PontoTuristicoWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsuarioUpdateOneRequiredWithoutVisitasNestedInput = {
    create?: XOR<UsuarioCreateWithoutVisitasInput, UsuarioUncheckedCreateWithoutVisitasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutVisitasInput
    upsert?: UsuarioUpsertWithoutVisitasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutVisitasInput, UsuarioUpdateWithoutVisitasInput>, UsuarioUncheckedUpdateWithoutVisitasInput>
  }

  export type PontoTuristicoUpdateOneRequiredWithoutVisitasNestedInput = {
    create?: XOR<PontoTuristicoCreateWithoutVisitasInput, PontoTuristicoUncheckedCreateWithoutVisitasInput>
    connectOrCreate?: PontoTuristicoCreateOrConnectWithoutVisitasInput
    upsert?: PontoTuristicoUpsertWithoutVisitasInput
    connect?: PontoTuristicoWhereUniqueInput
    update?: XOR<XOR<PontoTuristicoUpdateToOneWithWhereWithoutVisitasInput, PontoTuristicoUpdateWithoutVisitasInput>, PontoTuristicoUncheckedUpdateWithoutVisitasInput>
  }

  export type UsuarioCreateNestedOneWithoutConquistasInput = {
    create?: XOR<UsuarioCreateWithoutConquistasInput, UsuarioUncheckedCreateWithoutConquistasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutConquistasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutConquistasNestedInput = {
    create?: XOR<UsuarioCreateWithoutConquistasInput, UsuarioUncheckedCreateWithoutConquistasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutConquistasInput
    upsert?: UsuarioUpsertWithoutConquistasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutConquistasInput, UsuarioUpdateWithoutConquistasInput>, UsuarioUncheckedUpdateWithoutConquistasInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ConquistaCreateWithoutUsuarioInput = {
    nome: string
    data?: Date | string
  }

  export type ConquistaUncheckedCreateWithoutUsuarioInput = {
    id?: number
    nome: string
    data?: Date | string
  }

  export type ConquistaCreateOrConnectWithoutUsuarioInput = {
    where: ConquistaWhereUniqueInput
    create: XOR<ConquistaCreateWithoutUsuarioInput, ConquistaUncheckedCreateWithoutUsuarioInput>
  }

  export type ConquistaCreateManyUsuarioInputEnvelope = {
    data: ConquistaCreateManyUsuarioInput | ConquistaCreateManyUsuarioInput[]
  }

  export type FeedbackCreateWithoutUsuarioInput = {
    texto: string
    estrelas: number
    tipo: string
    ponto: PontoTuristicoCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutUsuarioInput = {
    id?: number
    texto: string
    estrelas: number
    tipo: string
    pontoId: number
  }

  export type FeedbackCreateOrConnectWithoutUsuarioInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUsuarioInput, FeedbackUncheckedCreateWithoutUsuarioInput>
  }

  export type FeedbackCreateManyUsuarioInputEnvelope = {
    data: FeedbackCreateManyUsuarioInput | FeedbackCreateManyUsuarioInput[]
  }

  export type VisitaCreateWithoutUsuarioInput = {
    data?: Date | string
    ponto: PontoTuristicoCreateNestedOneWithoutVisitasInput
  }

  export type VisitaUncheckedCreateWithoutUsuarioInput = {
    id?: number
    data?: Date | string
    pontoId: number
  }

  export type VisitaCreateOrConnectWithoutUsuarioInput = {
    where: VisitaWhereUniqueInput
    create: XOR<VisitaCreateWithoutUsuarioInput, VisitaUncheckedCreateWithoutUsuarioInput>
  }

  export type VisitaCreateManyUsuarioInputEnvelope = {
    data: VisitaCreateManyUsuarioInput | VisitaCreateManyUsuarioInput[]
  }

  export type ConquistaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: ConquistaWhereUniqueInput
    update: XOR<ConquistaUpdateWithoutUsuarioInput, ConquistaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ConquistaCreateWithoutUsuarioInput, ConquistaUncheckedCreateWithoutUsuarioInput>
  }

  export type ConquistaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: ConquistaWhereUniqueInput
    data: XOR<ConquistaUpdateWithoutUsuarioInput, ConquistaUncheckedUpdateWithoutUsuarioInput>
  }

  export type ConquistaUpdateManyWithWhereWithoutUsuarioInput = {
    where: ConquistaScalarWhereInput
    data: XOR<ConquistaUpdateManyMutationInput, ConquistaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ConquistaScalarWhereInput = {
    AND?: ConquistaScalarWhereInput | ConquistaScalarWhereInput[]
    OR?: ConquistaScalarWhereInput[]
    NOT?: ConquistaScalarWhereInput | ConquistaScalarWhereInput[]
    id?: IntFilter<"Conquista"> | number
    nome?: StringFilter<"Conquista"> | string
    data?: DateTimeFilter<"Conquista"> | Date | string
    usuarioId?: IntFilter<"Conquista"> | number
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUsuarioInput, FeedbackUncheckedUpdateWithoutUsuarioInput>
    create: XOR<FeedbackCreateWithoutUsuarioInput, FeedbackUncheckedCreateWithoutUsuarioInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUsuarioInput, FeedbackUncheckedUpdateWithoutUsuarioInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUsuarioInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: IntFilter<"Feedback"> | number
    texto?: StringFilter<"Feedback"> | string
    estrelas?: IntFilter<"Feedback"> | number
    tipo?: StringFilter<"Feedback"> | string
    usuarioId?: IntFilter<"Feedback"> | number
    pontoId?: IntFilter<"Feedback"> | number
  }

  export type VisitaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: VisitaWhereUniqueInput
    update: XOR<VisitaUpdateWithoutUsuarioInput, VisitaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<VisitaCreateWithoutUsuarioInput, VisitaUncheckedCreateWithoutUsuarioInput>
  }

  export type VisitaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: VisitaWhereUniqueInput
    data: XOR<VisitaUpdateWithoutUsuarioInput, VisitaUncheckedUpdateWithoutUsuarioInput>
  }

  export type VisitaUpdateManyWithWhereWithoutUsuarioInput = {
    where: VisitaScalarWhereInput
    data: XOR<VisitaUpdateManyMutationInput, VisitaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type VisitaScalarWhereInput = {
    AND?: VisitaScalarWhereInput | VisitaScalarWhereInput[]
    OR?: VisitaScalarWhereInput[]
    NOT?: VisitaScalarWhereInput | VisitaScalarWhereInput[]
    id?: IntFilter<"Visita"> | number
    data?: DateTimeFilter<"Visita"> | Date | string
    usuarioId?: IntFilter<"Visita"> | number
    pontoId?: IntFilter<"Visita"> | number
  }

  export type FeedbackCreateWithoutPontoInput = {
    texto: string
    estrelas: number
    tipo: string
    usuario: UsuarioCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutPontoInput = {
    id?: number
    texto: string
    estrelas: number
    tipo: string
    usuarioId: number
  }

  export type FeedbackCreateOrConnectWithoutPontoInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutPontoInput, FeedbackUncheckedCreateWithoutPontoInput>
  }

  export type FeedbackCreateManyPontoInputEnvelope = {
    data: FeedbackCreateManyPontoInput | FeedbackCreateManyPontoInput[]
  }

  export type VisitaCreateWithoutPontoInput = {
    data?: Date | string
    usuario: UsuarioCreateNestedOneWithoutVisitasInput
  }

  export type VisitaUncheckedCreateWithoutPontoInput = {
    id?: number
    data?: Date | string
    usuarioId: number
  }

  export type VisitaCreateOrConnectWithoutPontoInput = {
    where: VisitaWhereUniqueInput
    create: XOR<VisitaCreateWithoutPontoInput, VisitaUncheckedCreateWithoutPontoInput>
  }

  export type VisitaCreateManyPontoInputEnvelope = {
    data: VisitaCreateManyPontoInput | VisitaCreateManyPontoInput[]
  }

  export type FeedbackUpsertWithWhereUniqueWithoutPontoInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutPontoInput, FeedbackUncheckedUpdateWithoutPontoInput>
    create: XOR<FeedbackCreateWithoutPontoInput, FeedbackUncheckedCreateWithoutPontoInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutPontoInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutPontoInput, FeedbackUncheckedUpdateWithoutPontoInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutPontoInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutPontoInput>
  }

  export type VisitaUpsertWithWhereUniqueWithoutPontoInput = {
    where: VisitaWhereUniqueInput
    update: XOR<VisitaUpdateWithoutPontoInput, VisitaUncheckedUpdateWithoutPontoInput>
    create: XOR<VisitaCreateWithoutPontoInput, VisitaUncheckedCreateWithoutPontoInput>
  }

  export type VisitaUpdateWithWhereUniqueWithoutPontoInput = {
    where: VisitaWhereUniqueInput
    data: XOR<VisitaUpdateWithoutPontoInput, VisitaUncheckedUpdateWithoutPontoInput>
  }

  export type VisitaUpdateManyWithWhereWithoutPontoInput = {
    where: VisitaScalarWhereInput
    data: XOR<VisitaUpdateManyMutationInput, VisitaUncheckedUpdateManyWithoutPontoInput>
  }

  export type UsuarioCreateWithoutFeedbacksInput = {
    nome: string
    email: string
    foto?: string | null
    conquistas?: ConquistaCreateNestedManyWithoutUsuarioInput
    visitas?: VisitaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutFeedbacksInput = {
    id?: number
    nome: string
    email: string
    foto?: string | null
    conquistas?: ConquistaUncheckedCreateNestedManyWithoutUsuarioInput
    visitas?: VisitaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutFeedbacksInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutFeedbacksInput, UsuarioUncheckedCreateWithoutFeedbacksInput>
  }

  export type PontoTuristicoCreateWithoutFeedbacksInput = {
    nome: string
    descricao: string
    latitude: number
    longitude: number
    categoria: string
    acessibilidade: boolean
    fotos: string
    visitas?: VisitaCreateNestedManyWithoutPontoInput
  }

  export type PontoTuristicoUncheckedCreateWithoutFeedbacksInput = {
    id?: number
    nome: string
    descricao: string
    latitude: number
    longitude: number
    categoria: string
    acessibilidade: boolean
    fotos: string
    visitas?: VisitaUncheckedCreateNestedManyWithoutPontoInput
  }

  export type PontoTuristicoCreateOrConnectWithoutFeedbacksInput = {
    where: PontoTuristicoWhereUniqueInput
    create: XOR<PontoTuristicoCreateWithoutFeedbacksInput, PontoTuristicoUncheckedCreateWithoutFeedbacksInput>
  }

  export type UsuarioUpsertWithoutFeedbacksInput = {
    update: XOR<UsuarioUpdateWithoutFeedbacksInput, UsuarioUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<UsuarioCreateWithoutFeedbacksInput, UsuarioUncheckedCreateWithoutFeedbacksInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutFeedbacksInput, UsuarioUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UsuarioUpdateWithoutFeedbacksInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    conquistas?: ConquistaUpdateManyWithoutUsuarioNestedInput
    visitas?: VisitaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    conquistas?: ConquistaUncheckedUpdateManyWithoutUsuarioNestedInput
    visitas?: VisitaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type PontoTuristicoUpsertWithoutFeedbacksInput = {
    update: XOR<PontoTuristicoUpdateWithoutFeedbacksInput, PontoTuristicoUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<PontoTuristicoCreateWithoutFeedbacksInput, PontoTuristicoUncheckedCreateWithoutFeedbacksInput>
    where?: PontoTuristicoWhereInput
  }

  export type PontoTuristicoUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: PontoTuristicoWhereInput
    data: XOR<PontoTuristicoUpdateWithoutFeedbacksInput, PontoTuristicoUncheckedUpdateWithoutFeedbacksInput>
  }

  export type PontoTuristicoUpdateWithoutFeedbacksInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    acessibilidade?: BoolFieldUpdateOperationsInput | boolean
    fotos?: StringFieldUpdateOperationsInput | string
    visitas?: VisitaUpdateManyWithoutPontoNestedInput
  }

  export type PontoTuristicoUncheckedUpdateWithoutFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    acessibilidade?: BoolFieldUpdateOperationsInput | boolean
    fotos?: StringFieldUpdateOperationsInput | string
    visitas?: VisitaUncheckedUpdateManyWithoutPontoNestedInput
  }

  export type UsuarioCreateWithoutVisitasInput = {
    nome: string
    email: string
    foto?: string | null
    conquistas?: ConquistaCreateNestedManyWithoutUsuarioInput
    feedbacks?: FeedbackCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutVisitasInput = {
    id?: number
    nome: string
    email: string
    foto?: string | null
    conquistas?: ConquistaUncheckedCreateNestedManyWithoutUsuarioInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutVisitasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutVisitasInput, UsuarioUncheckedCreateWithoutVisitasInput>
  }

  export type PontoTuristicoCreateWithoutVisitasInput = {
    nome: string
    descricao: string
    latitude: number
    longitude: number
    categoria: string
    acessibilidade: boolean
    fotos: string
    feedbacks?: FeedbackCreateNestedManyWithoutPontoInput
  }

  export type PontoTuristicoUncheckedCreateWithoutVisitasInput = {
    id?: number
    nome: string
    descricao: string
    latitude: number
    longitude: number
    categoria: string
    acessibilidade: boolean
    fotos: string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutPontoInput
  }

  export type PontoTuristicoCreateOrConnectWithoutVisitasInput = {
    where: PontoTuristicoWhereUniqueInput
    create: XOR<PontoTuristicoCreateWithoutVisitasInput, PontoTuristicoUncheckedCreateWithoutVisitasInput>
  }

  export type UsuarioUpsertWithoutVisitasInput = {
    update: XOR<UsuarioUpdateWithoutVisitasInput, UsuarioUncheckedUpdateWithoutVisitasInput>
    create: XOR<UsuarioCreateWithoutVisitasInput, UsuarioUncheckedCreateWithoutVisitasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutVisitasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutVisitasInput, UsuarioUncheckedUpdateWithoutVisitasInput>
  }

  export type UsuarioUpdateWithoutVisitasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    conquistas?: ConquistaUpdateManyWithoutUsuarioNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutVisitasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    conquistas?: ConquistaUncheckedUpdateManyWithoutUsuarioNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type PontoTuristicoUpsertWithoutVisitasInput = {
    update: XOR<PontoTuristicoUpdateWithoutVisitasInput, PontoTuristicoUncheckedUpdateWithoutVisitasInput>
    create: XOR<PontoTuristicoCreateWithoutVisitasInput, PontoTuristicoUncheckedCreateWithoutVisitasInput>
    where?: PontoTuristicoWhereInput
  }

  export type PontoTuristicoUpdateToOneWithWhereWithoutVisitasInput = {
    where?: PontoTuristicoWhereInput
    data: XOR<PontoTuristicoUpdateWithoutVisitasInput, PontoTuristicoUncheckedUpdateWithoutVisitasInput>
  }

  export type PontoTuristicoUpdateWithoutVisitasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    acessibilidade?: BoolFieldUpdateOperationsInput | boolean
    fotos?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUpdateManyWithoutPontoNestedInput
  }

  export type PontoTuristicoUncheckedUpdateWithoutVisitasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    acessibilidade?: BoolFieldUpdateOperationsInput | boolean
    fotos?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutPontoNestedInput
  }

  export type UsuarioCreateWithoutConquistasInput = {
    nome: string
    email: string
    foto?: string | null
    feedbacks?: FeedbackCreateNestedManyWithoutUsuarioInput
    visitas?: VisitaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutConquistasInput = {
    id?: number
    nome: string
    email: string
    foto?: string | null
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUsuarioInput
    visitas?: VisitaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutConquistasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutConquistasInput, UsuarioUncheckedCreateWithoutConquistasInput>
  }

  export type UsuarioUpsertWithoutConquistasInput = {
    update: XOR<UsuarioUpdateWithoutConquistasInput, UsuarioUncheckedUpdateWithoutConquistasInput>
    create: XOR<UsuarioCreateWithoutConquistasInput, UsuarioUncheckedCreateWithoutConquistasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutConquistasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutConquistasInput, UsuarioUncheckedUpdateWithoutConquistasInput>
  }

  export type UsuarioUpdateWithoutConquistasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    feedbacks?: FeedbackUpdateManyWithoutUsuarioNestedInput
    visitas?: VisitaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutConquistasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUsuarioNestedInput
    visitas?: VisitaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ConquistaCreateManyUsuarioInput = {
    id?: number
    nome: string
    data?: Date | string
  }

  export type FeedbackCreateManyUsuarioInput = {
    id?: number
    texto: string
    estrelas: number
    tipo: string
    pontoId: number
  }

  export type VisitaCreateManyUsuarioInput = {
    id?: number
    data?: Date | string
    pontoId: number
  }

  export type ConquistaUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConquistaUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConquistaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUpdateWithoutUsuarioInput = {
    texto?: StringFieldUpdateOperationsInput | string
    estrelas?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    ponto?: PontoTuristicoUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    estrelas?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    pontoId?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    estrelas?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    pontoId?: IntFieldUpdateOperationsInput | number
  }

  export type VisitaUpdateWithoutUsuarioInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    ponto?: PontoTuristicoUpdateOneRequiredWithoutVisitasNestedInput
  }

  export type VisitaUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    pontoId?: IntFieldUpdateOperationsInput | number
  }

  export type VisitaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    pontoId?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackCreateManyPontoInput = {
    id?: number
    texto: string
    estrelas: number
    tipo: string
    usuarioId: number
  }

  export type VisitaCreateManyPontoInput = {
    id?: number
    data?: Date | string
    usuarioId: number
  }

  export type FeedbackUpdateWithoutPontoInput = {
    texto?: StringFieldUpdateOperationsInput | string
    estrelas?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutPontoInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    estrelas?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUncheckedUpdateManyWithoutPontoInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    estrelas?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type VisitaUpdateWithoutPontoInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutVisitasNestedInput
  }

  export type VisitaUncheckedUpdateWithoutPontoInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type VisitaUncheckedUpdateManyWithoutPontoInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}